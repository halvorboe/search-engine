{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1","program":"/Users/halvorbo/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","half","--edition=2018","/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=d1f9e48a32453074","-C","extra-filename=-d1f9e48a32453074","--out-dir","/Users/halvorbo/Projects/search-engine/advanced/target/rls/debug/deps","-L","dependency=/Users/halvorbo/Projects/search-engine/advanced/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/halvorbo/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/halvorbo/Projects/search-engine/advanced/target/rls/debug/deps/libhalf-d1f9e48a32453074.rmeta"},"prelude":{"crate_id":{"name":"half","disambiguator":[5769919223418311167,738705059759561833]},"crate_root":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src","external_crates":[{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[4677351122568421315,12912476906165123890]}},{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10488131761368839759,14745294566605726166]}},{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[897566241891434780,10334371453616731725]}}],"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":0,"byte_end":4723,"line_start":1,"line_end":118,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":474},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4052,"byte_end":4055,"line_start":85,"line_end":85,"column_start":19,"column_end":22},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4097,"byte_end":4103,"line_start":88,"line_end":88,"column_start":19,"column_end":25},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":454},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4122,"byte_end":4126,"line_start":90,"line_end":90,"column_start":17,"column_end":21},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":454},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4352,"byte_end":4356,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":428}},{"kind":"Use","ref_id":{"krate":0,"index":474},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4358,"byte_end":4361,"line_start":102,"line_end":102,"column_start":15,"column_end":18},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":428}},{"kind":"Use","ref_id":{"krate":0,"index":374},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4379,"byte_end":4395,"line_start":103,"line_end":103,"column_start":17,"column_end":33},"alias_span":null,"name":"HalfBitsSliceExt","value":"","parent":{"krate":0,"index":428}},{"kind":"Use","ref_id":{"krate":0,"index":367},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4397,"byte_end":4414,"line_start":103,"line_end":103,"column_start":35,"column_end":52},"alias_span":null,"name":"HalfFloatSliceExt","value":"","parent":{"krate":0,"index":428}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":0,"byte_end":4723,"line_start":1,"line_end":118,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":154},{"krate":0,"index":353},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":443}],"decl_id":null,"docs":" A crate that provides support for half-precision 16-bit floating point types.","sig":null,"attributes":[{"value":"/ A crate that provides support for half-precision 16-bit floating point types.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":82,"byte_end":85,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides the [`f16`] type, which is an implementation of the IEEE 754-2008 standard","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":86,"byte_end":184,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ [`binary16`] a.k.a `half` floating point type. This 16-bit floating point type is intended for","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":185,"byte_end":283,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ efficient storage where the full range and precision of a larger floating point value is not","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":284,"byte_end":380,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ required. This is especially useful for image storage formats.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":381,"byte_end":447,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":448,"byte_end":451,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`bf16`] type, an alternative 16-bit floating point format. The","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":452,"byte_end":546,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ [`bfloat16`] format is a truncated IEEE 754 standard `binary32` float that preserves the","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":547,"byte_end":639,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ exponent to allow the same range as `f32` but with only 8 bits of precision (instead of 11","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":640,"byte_end":734,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ bits for [`f16`]). See the [`bf16`] type for details.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":735,"byte_end":792,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":793,"byte_end":796,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Because [`f16`] and [`bf16`] are primarily for efficient storage, floating point operations such as","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":797,"byte_end":900,"line_start":13,"line_end":13,"column_start":1,"column_end":104}},{"value":"/ addition, multiplication, etc. are not implemented. Operations should be performed with `f32`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":901,"byte_end":998,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ or higher-precision types and converted to/from [`f16`] or [`bf16`] as necessary.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":999,"byte_end":1084,"line_start":15,"line_end":15,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1085,"byte_end":1088,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`slice`] module for zero-copy in-place conversions of `u16` slices","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1089,"byte_end":1187,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ to both [`f16`] and [`bf16`], as well as efficient vectorized conversions of larger buffers of","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1188,"byte_end":1286,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ floating point values to and from these half formats.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1287,"byte_end":1344,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1345,"byte_end":1348,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A [`prelude`] module is provided for easy importing of available utility traits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1349,"byte_end":1433,"line_start":21,"line_end":21,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1434,"byte_end":1437,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Some hardware architectures provide support for 16-bit floating point conversions. Enable the","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1438,"byte_end":1535,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ `use-intrinsics` feature to use LLVM intrinsics for hardware conversions. This crate does no","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1536,"byte_end":1632,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ checks on whether the hardware supports the feature. This feature currently only works on","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1633,"byte_end":1726,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"/ nightly Rust due to a compiler feature gate. When this feature is enabled and the hardware","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1727,"byte_end":1821,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ supports it, the [`slice`] trait conversions will use vectorized SIMD intructions for","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1822,"byte_end":1911,"line_start":27,"line_end":27,"column_start":1,"column_end":90}},{"value":"/ increased efficiency.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1912,"byte_end":1937,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1938,"byte_end":1941,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Support for [`serde`] crate `Serialize` and `Deserialize` traits is provided when the `serde`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":1942,"byte_end":2039,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ feature is enabled. This adds a dependency on [`serde`] crate so is an optional cargo feature.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2040,"byte_end":2138,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/ Support for [`bytemuck`] crate `Zeroable` and `Pod` traits is provided with the `bytemuck`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2139,"byte_end":2233,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ feature. Support for the [`num-traits`] crate `ToPrimitive` and `FromPrimitive` traits is","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2234,"byte_end":2327,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ provided with the `num-traits` feature.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2328,"byte_end":2371,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2372,"byte_end":2375,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ The crate uses `#[no_std]` by default, so can be used in embedded environments without using the","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2376,"byte_end":2476,"line_start":36,"line_end":36,"column_start":1,"column_end":101}},{"value":"/ Rust `std` library. A `std` feature is available, which enables additional utilities using the","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2477,"byte_end":2575,"line_start":37,"line_end":37,"column_start":1,"column_end":99}},{"value":"/ `std` library, such as the [`vec`] module that provides zero-copy `Vec` conversions. The `alloc`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2576,"byte_end":2676,"line_start":38,"line_end":38,"column_start":1,"column_end":101}},{"value":"/ feature may be used to enable the [`vec`] module without adding a dependency to the `std`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2677,"byte_end":2770,"line_start":39,"line_end":39,"column_start":1,"column_end":94}},{"value":"/ library.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2771,"byte_end":2783,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2784,"byte_end":2787,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ [`f16`]: struct.f16.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2788,"byte_end":2816,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2817,"byte_end":2901,"line_start":43,"line_end":43,"column_start":1,"column_end":85}},{"value":"/ [`bf16`]: struct.bf16.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2902,"byte_end":2932,"line_start":44,"line_end":44,"column_start":1,"column_end":31}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":2933,"byte_end":3011,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ [`slice`]: slice/index.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3012,"byte_end":3043,"line_start":46,"line_end":46,"column_start":1,"column_end":32}},{"value":"/ [`prelude`]: prelude/index.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3044,"byte_end":3079,"line_start":47,"line_end":47,"column_start":1,"column_end":36}},{"value":"/ [`serde`]: https://crates.io/crates/serde","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3080,"byte_end":3125,"line_start":48,"line_end":48,"column_start":1,"column_end":46}},{"value":"/ [`bytemuck`]: https://crates.io/crates/bytemuck","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3126,"byte_end":3177,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/ [`num-traits`]: https://crates.io/crates/num-traits","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3178,"byte_end":3233,"line_start":50,"line_end":50,"column_start":1,"column_end":56}},{"value":"/ [`vec`]: vec/index.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3234,"byte_end":3261,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"warn(missing_docs, missing_copy_implementations,\n       missing_debug_implementations, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, future_incompatible,\n       rust_2018_compatibility, rust_2018_idioms, clippy :: all)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3263,"byte_end":3532,"line_start":53,"line_end":64,"column_start":1,"column_end":3}},{"value":"allow(clippy :: verbose_bit_mask, clippy :: cast_lossless)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3533,"byte_end":3591,"line_start":65,"line_end":65,"column_start":1,"column_end":59}},{"value":"no_std","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3626,"byte_end":3632,"line_start":66,"line_end":66,"column_start":35,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":454},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6088,"byte_end":6092,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"bf16","qualname":"::bfloat::bf16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the [`bfloat16`] format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the [`bfloat16`] format.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5083,"byte_end":5153,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5154,"byte_end":5157,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The [`bfloat16`] floating point format is a truncated 16-bit version of the IEEE 754 standard","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5158,"byte_end":5255,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ `binary32`, a.k.a `f32`. [`bf16`] has approximately the same dynamic range as `f32` by having","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5256,"byte_end":5353,"line_start":21,"line_end":21,"column_start":1,"column_end":98}},{"value":"/ a lower precision than [`f16`]. While [`f16`] has a precision of 11 bits, [`bf16`] has a","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5354,"byte_end":5446,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ precision of only 8 bits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5447,"byte_end":5476,"line_start":23,"line_end":23,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5477,"byte_end":5480,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Like [`f16`], [`bf16`] does not offer arithmetic operations as it is intended for compact","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5481,"byte_end":5574,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"/ storage rather than calculations. Operations should be performed with `f32` or higher-precision","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5575,"byte_end":5674,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"/ types and converted to/from [`bf16`] as necessary.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5675,"byte_end":5729,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5730,"byte_end":5733,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5734,"byte_end":5812,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ [`bf16`]: struct.bf16.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5813,"byte_end":5843,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"/ [`f16`]: struct.f16.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5844,"byte_end":5872,"line_start":31,"line_end":31,"column_start":1,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5873,"byte_end":5903,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":5936,"byte_end":5956,"line_start":34,"line_end":34,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6216,"byte_end":6225,"line_start":42,"line_end":42,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<bf16>::from_bits","value":"pub const fn from_bits(u16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`](struct.bf16.html) value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`](struct.bf16.html) value from the raw bits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6116,"byte_end":6184,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6189,"byte_end":6198,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6658,"byte_end":6666,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<bf16>::from_f32","value":"pub fn from_f32(f32) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`](struct.bf16.html) value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`](struct.bf16.html) value from a 32-bit floating point value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6277,"byte_end":6362,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6367,"byte_end":6370,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is too large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6375,"byte_end":6464,"line_start":48,"line_end":48,"column_start":5,"column_end":91}},{"value":"/ Subnormal values that are too tiny to be represented will result in ±0. All other values","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6469,"byte_end":6562,"line_start":49,"line_end":49,"column_start":5,"column_end":97}},{"value":"/ are truncated and rounded to the nearest representable value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6567,"byte_end":6632,"line_start":50,"line_end":50,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6637,"byte_end":6646,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7211,"byte_end":7219,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<bf16>::from_f64","value":"pub fn from_f64(f64) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`](struct.bf16.html) value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`](struct.bf16.html) value from a 64-bit floating point value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6742,"byte_end":6827,"line_start":56,"line_end":56,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6832,"byte_end":6835,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6840,"byte_end":6928,"line_start":58,"line_end":58,"column_start":5,"column_end":90}},{"value":"/ 64-bit subnormal values are too tiny to be represented and result in ±0. Exponents that","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6933,"byte_end":7025,"line_start":59,"line_end":59,"column_start":5,"column_end":96}},{"value":"/ underflow the minimum exponent will result in subnormals or ±0. All other values are","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7030,"byte_end":7119,"line_start":60,"line_end":60,"column_start":5,"column_end":93}},{"value":"/ truncated and rounded to the nearest representable value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7124,"byte_end":7185,"line_start":61,"line_end":61,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7190,"byte_end":7199,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7408,"byte_end":7415,"line_start":69,"line_end":69,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<bf16>::to_bits","value":"pub const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`](struct.bf16.html) into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`bf16`](struct.bf16.html) into the underlying bit representation.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7295,"byte_end":7376,"line_start":67,"line_end":67,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7381,"byte_end":7390,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7801,"byte_end":7812,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"to_le_bytes","qualname":"<bf16>::to_le_bytes","value":"pub fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7457,"byte_end":7549,"line_start":73,"line_end":73,"column_start":5,"column_end":97}},{"value":"/ little-endian byte order.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7554,"byte_end":7583,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7588,"byte_end":7591,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7596,"byte_end":7610,"line_start":76,"line_end":76,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7615,"byte_end":7618,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7623,"byte_end":7634,"line_start":78,"line_end":78,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7639,"byte_end":7666,"line_start":79,"line_end":79,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7671,"byte_end":7722,"line_start":80,"line_end":80,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x48, 0x41]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7727,"byte_end":7763,"line_start":81,"line_end":81,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7768,"byte_end":7775,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7780,"byte_end":7789,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8223,"byte_end":8234,"line_start":99,"line_end":99,"column_start":12,"column_end":23},"name":"to_be_bytes","qualname":"<bf16>::to_be_bytes","value":"pub fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7872,"byte_end":7964,"line_start":88,"line_end":88,"column_start":5,"column_end":97}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":7969,"byte_end":8005,"line_start":89,"line_end":89,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8010,"byte_end":8013,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8018,"byte_end":8032,"line_start":91,"line_end":91,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8037,"byte_end":8040,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8045,"byte_end":8056,"line_start":93,"line_end":93,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8061,"byte_end":8088,"line_start":94,"line_end":94,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8093,"byte_end":8144,"line_start":95,"line_end":95,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x41, 0x48]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8149,"byte_end":8185,"line_start":96,"line_end":96,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8190,"byte_end":8197,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8202,"byte_end":8211,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8886,"byte_end":8897,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"to_ne_bytes","qualname":"<bf16>::to_ne_bytes","value":"pub fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8294,"byte_end":8386,"line_start":103,"line_end":103,"column_start":5,"column_end":97}},{"value":"/ native byte order.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8391,"byte_end":8413,"line_start":104,"line_end":104,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8418,"byte_end":8421,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use `to_be_bytes`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8426,"byte_end":8520,"line_start":106,"line_end":106,"column_start":5,"column_end":99}},{"value":"/ or `to_le_bytes`, as appropriate, instead.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8525,"byte_end":8571,"line_start":107,"line_end":107,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8576,"byte_end":8579,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8584,"byte_end":8598,"line_start":109,"line_end":109,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8603,"byte_end":8606,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8611,"byte_end":8622,"line_start":111,"line_end":111,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8627,"byte_end":8654,"line_start":112,"line_end":112,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8659,"byte_end":8710,"line_start":113,"line_end":113,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8715,"byte_end":8769,"line_start":114,"line_end":114,"column_start":5,"column_end":59}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8774,"byte_end":8794,"line_start":115,"line_end":115,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8799,"byte_end":8811,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8816,"byte_end":8836,"line_start":117,"line_end":117,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8841,"byte_end":8848,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8853,"byte_end":8860,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8865,"byte_end":8874,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9273,"byte_end":9286,"line_start":135,"line_end":135,"column_start":12,"column_end":25},"name":"from_le_bytes","qualname":"<bf16>::from_le_bytes","value":"pub fn from_le_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":8957,"byte_end":9048,"line_start":125,"line_end":125,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9053,"byte_end":9056,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9061,"byte_end":9075,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9080,"byte_end":9083,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9088,"byte_end":9099,"line_start":129,"line_end":129,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9104,"byte_end":9131,"line_start":130,"line_end":130,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_le_bytes([0x48, 0x41]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9136,"byte_end":9186,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9191,"byte_end":9235,"line_start":132,"line_end":132,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9240,"byte_end":9247,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9252,"byte_end":9261,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9688,"byte_end":9701,"line_start":149,"line_end":149,"column_start":12,"column_end":25},"name":"from_be_bytes","qualname":"<bf16>::from_be_bytes","value":"pub fn from_be_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9375,"byte_end":9463,"line_start":139,"line_end":139,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9468,"byte_end":9471,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9476,"byte_end":9490,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9495,"byte_end":9498,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9503,"byte_end":9514,"line_start":143,"line_end":143,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9519,"byte_end":9546,"line_start":144,"line_end":144,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_be_bytes([0x41, 0x48]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9551,"byte_end":9601,"line_start":145,"line_end":145,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9606,"byte_end":9650,"line_start":146,"line_end":146,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9655,"byte_end":9662,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9667,"byte_end":9676,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10373,"byte_end":10386,"line_start":170,"line_end":170,"column_start":12,"column_end":25},"name":"from_ne_bytes","qualname":"<bf16>::from_ne_bytes","value":"pub fn from_ne_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9790,"byte_end":9881,"line_start":153,"line_end":153,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9886,"byte_end":9889,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9894,"byte_end":9983,"line_start":155,"line_end":155,"column_start":5,"column_end":94}},{"value":"/ `from_be_bytes` or `from_le_bytes`, as appropriate instead.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":9988,"byte_end":10051,"line_start":156,"line_end":156,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10056,"byte_end":10059,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10064,"byte_end":10078,"line_start":158,"line_end":158,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10083,"byte_end":10086,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10091,"byte_end":10102,"line_start":160,"line_end":160,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10107,"byte_end":10134,"line_start":161,"line_end":161,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10139,"byte_end":10207,"line_start":162,"line_end":162,"column_start":5,"column_end":73}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10212,"byte_end":10232,"line_start":163,"line_end":163,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10237,"byte_end":10249,"line_start":164,"line_end":164,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10254,"byte_end":10274,"line_start":165,"line_end":165,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10279,"byte_end":10286,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10291,"byte_end":10335,"line_start":167,"line_end":167,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10340,"byte_end":10347,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10352,"byte_end":10361,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10664,"byte_end":10670,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<bf16>::to_f32","value":"pub fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`](struct.bf16.html) value into an `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`](struct.bf16.html) value into an `f32` value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10475,"byte_end":10543,"line_start":174,"line_end":174,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10548,"byte_end":10551,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in `f32`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10556,"byte_end":10638,"line_start":176,"line_end":176,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10643,"byte_end":10652,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10923,"byte_end":10929,"line_start":186,"line_end":186,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<bf16>::to_f64","value":"pub fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`](struct.bf16.html) value into an `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`](struct.bf16.html) value into an `f64` value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10734,"byte_end":10802,"line_start":182,"line_end":182,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10807,"byte_end":10810,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in `f64`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10815,"byte_end":10897,"line_start":184,"line_end":184,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10902,"byte_end":10911,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11329,"byte_end":11335,"line_start":204,"line_end":204,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<bf16>::is_nan","value":"pub const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is NaN and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is NaN and `false` otherwise.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":10993,"byte_end":11055,"line_start":190,"line_end":190,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11060,"byte_end":11063,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11068,"byte_end":11082,"line_start":192,"line_end":192,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11087,"byte_end":11090,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11095,"byte_end":11106,"line_start":194,"line_end":194,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11111,"byte_end":11138,"line_start":195,"line_end":195,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11143,"byte_end":11146,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11151,"byte_end":11175,"line_start":197,"line_end":197,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11180,"byte_end":11216,"line_start":198,"line_end":198,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11221,"byte_end":11224,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11229,"byte_end":11255,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11260,"byte_end":11285,"line_start":201,"line_end":201,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11290,"byte_end":11297,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11302,"byte_end":11311,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11910,"byte_end":11921,"line_start":227,"line_end":227,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<bf16>::is_infinite","value":"pub const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false` otherwise.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11402,"byte_end":11466,"line_start":208,"line_end":208,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11471,"byte_end":11474,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11479,"byte_end":11493,"line_start":210,"line_end":210,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11498,"byte_end":11501,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11506,"byte_end":11517,"line_start":212,"line_end":212,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11522,"byte_end":11549,"line_start":213,"line_end":213,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11554,"byte_end":11557,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11562,"byte_end":11597,"line_start":215,"line_end":215,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11602,"byte_end":11631,"line_start":216,"line_end":216,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11636,"byte_end":11673,"line_start":217,"line_end":217,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11678,"byte_end":11702,"line_start":218,"line_end":218,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11707,"byte_end":11710,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11715,"byte_end":11745,"line_start":220,"line_end":220,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11750,"byte_end":11782,"line_start":221,"line_end":221,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11787,"byte_end":11790,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11795,"byte_end":11826,"line_start":223,"line_end":223,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11831,"byte_end":11866,"line_start":224,"line_end":224,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11871,"byte_end":11878,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11883,"byte_end":11892,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12488,"byte_end":12497,"line_start":250,"line_end":250,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<bf16>::is_finite","value":"pub const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor NaN.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":11989,"byte_end":12051,"line_start":231,"line_end":231,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12056,"byte_end":12059,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12064,"byte_end":12078,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12083,"byte_end":12086,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12091,"byte_end":12102,"line_start":235,"line_end":235,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12107,"byte_end":12134,"line_start":236,"line_end":236,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12139,"byte_end":12142,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12147,"byte_end":12182,"line_start":238,"line_end":238,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12187,"byte_end":12216,"line_start":239,"line_end":239,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12221,"byte_end":12258,"line_start":240,"line_end":240,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12263,"byte_end":12287,"line_start":241,"line_end":241,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12292,"byte_end":12295,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12300,"byte_end":12327,"line_start":243,"line_end":243,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12332,"byte_end":12335,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12340,"byte_end":12370,"line_start":245,"line_end":245,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12375,"byte_end":12405,"line_start":246,"line_end":246,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12410,"byte_end":12444,"line_start":247,"line_end":247,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12449,"byte_end":12456,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12461,"byte_end":12470,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13247,"byte_end":13256,"line_start":276,"line_end":276,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<bf16>::is_normal","value":"pub fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12565,"byte_end":12643,"line_start":254,"line_end":254,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12648,"byte_end":12651,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12656,"byte_end":12670,"line_start":256,"line_end":256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12675,"byte_end":12678,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12683,"byte_end":12694,"line_start":258,"line_end":258,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12699,"byte_end":12726,"line_start":259,"line_end":259,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12731,"byte_end":12734,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ let min = bf16::MIN_POSITIVE;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12739,"byte_end":12772,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/ let max = bf16::MAX;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12777,"byte_end":12801,"line_start":262,"line_end":262,"column_start":5,"column_end":29}},{"value":"/ let lower_than_min = bf16::from_f32(1.0e-39_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12806,"byte_end":12859,"line_start":263,"line_end":263,"column_start":5,"column_end":58}},{"value":"/ let zero = bf16::from_f32(0.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12864,"byte_end":12903,"line_start":264,"line_end":264,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12908,"byte_end":12911,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12916,"byte_end":12945,"line_start":266,"line_end":266,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12950,"byte_end":12979,"line_start":267,"line_end":267,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12984,"byte_end":12987,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":12992,"byte_end":13023,"line_start":269,"line_end":269,"column_start":5,"column_end":36}},{"value":"/ assert!(!bf16::NAN.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13028,"byte_end":13064,"line_start":270,"line_end":270,"column_start":5,"column_end":41}},{"value":"/ assert!(!bf16::INFINITY.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13069,"byte_end":13110,"line_start":271,"line_end":271,"column_start":5,"column_end":46}},{"value":"/ // Values between 0 and `min` are subnormal.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13115,"byte_end":13163,"line_start":272,"line_end":272,"column_start":5,"column_end":53}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13168,"byte_end":13209,"line_start":273,"line_end":273,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13214,"byte_end":13221,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13226,"byte_end":13235,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13892,"byte_end":13900,"line_start":298,"line_end":298,"column_start":12,"column_end":20},"name":"classify","qualname":"<bf16>::classify","value":"pub fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13359,"byte_end":13413,"line_start":281,"line_end":281,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13418,"byte_end":13421,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13426,"byte_end":13516,"line_start":283,"line_end":283,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13521,"byte_end":13543,"line_start":284,"line_end":284,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13548,"byte_end":13551,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13556,"byte_end":13570,"line_start":286,"line_end":286,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13575,"byte_end":13578,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13583,"byte_end":13594,"line_start":288,"line_end":288,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13599,"byte_end":13628,"line_start":289,"line_end":289,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13633,"byte_end":13660,"line_start":290,"line_end":290,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13665,"byte_end":13668,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let num = bf16::from_f32(12.4_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13673,"byte_end":13712,"line_start":292,"line_end":292,"column_start":5,"column_end":44}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13717,"byte_end":13746,"line_start":293,"line_end":293,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13751,"byte_end":13754,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13759,"byte_end":13810,"line_start":295,"line_end":295,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13815,"byte_end":13868,"line_start":296,"line_end":296,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":13873,"byte_end":13880,"line_start":297,"line_end":297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14839,"byte_end":14845,"line_start":328,"line_end":328,"column_start":12,"column_end":18},"name":"signum","qualname":"<bf16>::signum","value":"pub fn signum(Self) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14268,"byte_end":14324,"line_start":310,"line_end":310,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14329,"byte_end":14332,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ * 1.0 if the number is positive, +0.0 or `INFINITY`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14337,"byte_end":14392,"line_start":312,"line_end":312,"column_start":5,"column_end":60}},{"value":"/ * −1.0 if the number is negative, −0.0` or `NEG_INFINITY`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14397,"byte_end":14462,"line_start":313,"line_end":313,"column_start":5,"column_end":66}},{"value":"/ * NaN if the number is NaN","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14467,"byte_end":14497,"line_start":314,"line_end":314,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14502,"byte_end":14505,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14510,"byte_end":14524,"line_start":316,"line_end":316,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14529,"byte_end":14532,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14537,"byte_end":14548,"line_start":318,"line_end":318,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14553,"byte_end":14580,"line_start":319,"line_end":319,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14585,"byte_end":14588,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(3.5_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14593,"byte_end":14629,"line_start":321,"line_end":321,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14634,"byte_end":14637,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), bf16::from_f32(1.0));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14642,"byte_end":14690,"line_start":323,"line_end":323,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(bf16::NEG_INFINITY.signum(), bf16::from_f32(-1.0));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14695,"byte_end":14761,"line_start":324,"line_end":324,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14766,"byte_end":14769,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.signum().is_nan());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14774,"byte_end":14815,"line_start":326,"line_end":326,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":14820,"byte_end":14827,"line_start":327,"line_end":327,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15629,"byte_end":15645,"line_start":356,"line_end":356,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<bf16>::is_sign_positive","value":"pub const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15053,"byte_end":15142,"line_start":338,"line_end":338,"column_start":5,"column_end":94}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15147,"byte_end":15178,"line_start":339,"line_end":339,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15183,"byte_end":15186,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15191,"byte_end":15205,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15210,"byte_end":15213,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15218,"byte_end":15229,"line_start":343,"line_end":343,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15234,"byte_end":15261,"line_start":344,"line_end":344,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15266,"byte_end":15269,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15274,"byte_end":15298,"line_start":346,"line_end":346,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15303,"byte_end":15339,"line_start":347,"line_end":347,"column_start":5,"column_end":41}},{"value":"/ let g = bf16::from_f32(-7.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15344,"byte_end":15381,"line_start":348,"line_end":348,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15386,"byte_end":15389,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15394,"byte_end":15428,"line_start":350,"line_end":350,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15433,"byte_end":15468,"line_start":351,"line_end":351,"column_start":5,"column_end":40}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15473,"byte_end":15518,"line_start":352,"line_end":352,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15523,"byte_end":15585,"line_start":353,"line_end":353,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15590,"byte_end":15597,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15602,"byte_end":15611,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16283,"byte_end":16299,"line_start":378,"line_end":378,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<bf16>::is_sign_negative","value":"pub const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15705,"byte_end":15796,"line_start":360,"line_end":360,"column_start":5,"column_end":94}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15801,"byte_end":15834,"line_start":361,"line_end":361,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15839,"byte_end":15842,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15847,"byte_end":15861,"line_start":363,"line_end":363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15866,"byte_end":15869,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15874,"byte_end":15885,"line_start":365,"line_end":365,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15890,"byte_end":15917,"line_start":366,"line_end":366,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15922,"byte_end":15925,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15930,"byte_end":15954,"line_start":368,"line_end":368,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15959,"byte_end":15994,"line_start":369,"line_end":369,"column_start":5,"column_end":40}},{"value":"/ let g = bf16::from_f32(-7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":15999,"byte_end":16035,"line_start":370,"line_end":370,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16040,"byte_end":16043,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16048,"byte_end":16083,"line_start":372,"line_end":372,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16088,"byte_end":16122,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16127,"byte_end":16172,"line_start":374,"line_end":374,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16177,"byte_end":16239,"line_start":375,"line_end":375,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16244,"byte_end":16251,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16256,"byte_end":16265,"line_start":377,"line_end":377,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":82},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16457,"byte_end":16463,"line_start":383,"line_end":383,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::bfloat::bf16::DIGITS","value":"u32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Approximate number of [`bf16`](struct.bf16.html) significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of [`bf16`](struct.bf16.html) significant digits in base 10.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16359,"byte_end":16442,"line_start":382,"line_end":382,"column_start":5,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":83},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16697,"byte_end":16704,"line_start":388,"line_end":388,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::bfloat::bf16::EPSILON","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html)\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16478,"byte_end":16508,"line_start":384,"line_end":384,"column_start":5,"column_end":35}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16513,"byte_end":16588,"line_start":385,"line_end":385,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16593,"byte_end":16596,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16601,"byte_end":16682,"line_start":387,"line_end":387,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16805,"byte_end":16813,"line_start":390,"line_end":390,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::bfloat::bf16::INFINITY","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) positive Infinity (+∞).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) positive Infinity (+∞).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16734,"byte_end":16790,"line_start":389,"line_end":389,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":85},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16928,"byte_end":16943,"line_start":392,"line_end":392,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::bfloat::bf16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Number of [`bf16`](struct.bf16.html) significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of [`bf16`](struct.bf16.html) significant digits in base 2.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16843,"byte_end":16913,"line_start":391,"line_end":391,"column_start":5,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17025,"byte_end":17028,"line_start":394,"line_end":394,"column_start":15,"column_end":18},"name":"MAX","qualname":"::bfloat::bf16::MAX","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Largest finite [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Largest finite [`bf16`](struct.bf16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":16958,"byte_end":17010,"line_start":393,"line_end":393,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":87},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17139,"byte_end":17149,"line_start":396,"line_end":396,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::bfloat::bf16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`](struct.bf16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`](struct.bf16.html) power of 10 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17055,"byte_end":17124,"line_start":395,"line_end":395,"column_start":5,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":88},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17248,"byte_end":17255,"line_start":398,"line_end":398,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::bfloat::bf16::MAX_EXP","value":"i32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`](struct.bf16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`](struct.bf16.html) power of 2 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17165,"byte_end":17233,"line_start":397,"line_end":397,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":89},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17340,"byte_end":17343,"line_start":400,"line_end":400,"column_start":15,"column_end":18},"name":"MIN","qualname":"::bfloat::bf16::MIN","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Smallest finite [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest finite [`bf16`](struct.bf16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17272,"byte_end":17325,"line_start":399,"line_end":399,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":90},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17461,"byte_end":17471,"line_start":402,"line_end":402,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::bfloat::bf16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Minimum possible normal [`bf16`](struct.bf16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`bf16`](struct.bf16.html) power of 10 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17370,"byte_end":17446,"line_start":401,"line_end":401,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":91},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17599,"byte_end":17606,"line_start":404,"line_end":404,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::bfloat::bf16::MIN_EXP","value":"i32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`bf16`](struct.bf16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`bf16`](struct.bf16.html) power of 2 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17488,"byte_end":17584,"line_start":403,"line_end":403,"column_start":5,"column_end":101}}]},{"kind":"Const","id":{"krate":0,"index":92},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17701,"byte_end":17713,"line_start":406,"line_end":406,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::bfloat::bf16::MIN_POSITIVE","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Smallest positive normal [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`bf16`](struct.bf16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17624,"byte_end":17686,"line_start":405,"line_end":405,"column_start":5,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":93},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17808,"byte_end":17811,"line_start":408,"line_end":408,"column_start":15,"column_end":18},"name":"NAN","qualname":"::bfloat::bf16::NAN","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) Not a Number (NaN).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17743,"byte_end":17793,"line_start":407,"line_end":407,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":94},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17912,"byte_end":17924,"line_start":410,"line_end":410,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::bfloat::bf16::NEG_INFINITY","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) negative infinity (-∞).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17841,"byte_end":17897,"line_start":409,"line_end":409,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":95},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18052,"byte_end":18057,"line_start":412,"line_end":412,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::bfloat::bf16::RADIX","value":"u32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`bf16`](struct.bf16.html).\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`bf16`](struct.bf16.html).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":17954,"byte_end":18037,"line_start":411,"line_end":411,"column_start":5,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":96},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18152,"byte_end":18174,"line_start":415,"line_end":415,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::bfloat::bf16::MIN_POSITIVE_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`bf16`](struct.bf16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18073,"byte_end":18137,"line_start":414,"line_end":414,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":97},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18274,"byte_end":18287,"line_start":417,"line_end":417,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::bfloat::bf16::MAX_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Maximum subnormal [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`bf16`](struct.bf16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18204,"byte_end":18259,"line_start":416,"line_end":416,"column_start":5,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":98},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18365,"byte_end":18368,"line_start":420,"line_end":420,"column_start":15,"column_end":18},"name":"ONE","qualname":"::bfloat::bf16::ONE","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 1\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 1","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18318,"byte_end":18350,"line_start":419,"line_end":419,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":99},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18445,"byte_end":18449,"line_start":422,"line_end":422,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::bfloat::bf16::ZERO","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 0\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 0","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18398,"byte_end":18430,"line_start":421,"line_end":421,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":100},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18527,"byte_end":18535,"line_start":424,"line_end":424,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::bfloat::bf16::NEG_ZERO","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) -0\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) -0","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18479,"byte_end":18512,"line_start":423,"line_end":423,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":101},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18633,"byte_end":18634,"line_start":427,"line_end":427,"column_start":15,"column_end":16},"name":"E","qualname":"::bfloat::bf16::E","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) Euler's number (ℯ).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) Euler's number (ℯ).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18566,"byte_end":18618,"line_start":426,"line_end":426,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":102},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18736,"byte_end":18738,"line_start":429,"line_end":429,"column_start":15,"column_end":17},"name":"PI","qualname":"::bfloat::bf16::PI","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) Archimedes' constant (π).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) Archimedes' constant (π).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18664,"byte_end":18721,"line_start":428,"line_end":428,"column_start":5,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":103},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18818,"byte_end":18827,"line_start":431,"line_end":431,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::bfloat::bf16::FRAC_1_PI","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 1/π\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 1/π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18768,"byte_end":18803,"line_start":430,"line_end":430,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":104},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18909,"byte_end":18922,"line_start":433,"line_end":433,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::bfloat::bf16::FRAC_1_SQRT_2","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 1/√2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 1/√2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18857,"byte_end":18894,"line_start":432,"line_end":432,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":105},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19002,"byte_end":19011,"line_start":435,"line_end":435,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::bfloat::bf16::FRAC_2_PI","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 2/π\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 2/π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":18952,"byte_end":18987,"line_start":434,"line_end":434,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":106},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19094,"byte_end":19108,"line_start":437,"line_end":437,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::bfloat::bf16::FRAC_2_SQRT_PI","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 2/√π\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 2/√π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19041,"byte_end":19079,"line_start":436,"line_end":436,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":107},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19188,"byte_end":19197,"line_start":439,"line_end":439,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::bfloat::bf16::FRAC_PI_2","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19138,"byte_end":19173,"line_start":438,"line_end":438,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":108},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19277,"byte_end":19286,"line_start":441,"line_end":441,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::bfloat::bf16::FRAC_PI_3","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/3\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/3","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19227,"byte_end":19262,"line_start":440,"line_end":440,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":109},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19366,"byte_end":19375,"line_start":443,"line_end":443,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::bfloat::bf16::FRAC_PI_4","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/4\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/4","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19316,"byte_end":19351,"line_start":442,"line_end":442,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":110},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19455,"byte_end":19464,"line_start":445,"line_end":445,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::bfloat::bf16::FRAC_PI_6","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/6\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/6","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19405,"byte_end":19440,"line_start":444,"line_end":444,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":111},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19544,"byte_end":19553,"line_start":447,"line_end":447,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::bfloat::bf16::FRAC_PI_8","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/8\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/8","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19494,"byte_end":19529,"line_start":446,"line_end":446,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19640,"byte_end":19645,"line_start":449,"line_end":449,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::bfloat::bf16::LN_10","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗇 10","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19583,"byte_end":19625,"line_start":448,"line_end":448,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":113},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19731,"byte_end":19735,"line_start":451,"line_end":451,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::bfloat::bf16::LN_2","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗇 2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19675,"byte_end":19716,"line_start":450,"line_end":450,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":114},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19832,"byte_end":19839,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::bfloat::bf16::LOG10_E","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19765,"byte_end":19817,"line_start":452,"line_end":452,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":115},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19934,"byte_end":19941,"line_start":455,"line_end":455,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::bfloat::bf16::LOG10_2","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19869,"byte_end":19919,"line_start":454,"line_end":454,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20035,"byte_end":20041,"line_start":457,"line_end":457,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::bfloat::bf16::LOG2_E","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":19971,"byte_end":20020,"line_start":456,"line_end":456,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":117},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20134,"byte_end":20141,"line_start":459,"line_end":459,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::bfloat::bf16::LOG2_10","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂10","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20071,"byte_end":20119,"line_start":458,"line_end":458,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20221,"byte_end":20227,"line_start":461,"line_end":461,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::bfloat::bf16::SQRT_2","value":"bf16","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) √2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) √2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20171,"byte_end":20206,"line_start":460,"line_end":460,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":474},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":52361,"byte_end":52364,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"f16","qualname":"::binary16::f16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`\n format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51492,"byte_end":51590,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ format.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51591,"byte_end":51602,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51603,"byte_end":51606,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This 16-bit floating point type is intended for efficient storage where the full range and","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51607,"byte_end":51701,"line_start":21,"line_end":21,"column_start":1,"column_end":95}},{"value":"/ precision of a larger floating point value is not required. Because [`f16`] is primarily for","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51702,"byte_end":51798,"line_start":22,"line_end":22,"column_start":1,"column_end":97}},{"value":"/ efficient storage, floating point operations such as addition, multiplication, etc. are not","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51799,"byte_end":51894,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"/ implemented. Operations should be performed with `f32` or higher-precision types and converted","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51895,"byte_end":51993,"line_start":24,"line_end":24,"column_start":1,"column_end":99}},{"value":"/ to/from [`f16`] as necessary.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":51994,"byte_end":52027,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":52028,"byte_end":52031,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`f16`]: struct.f16.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":52032,"byte_end":52060,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":52061,"byte_end":52145,"line_start":28,"line_end":28,"column_start":1,"column_end":85}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":52146,"byte_end":52176,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":52209,"byte_end":52229,"line_start":31,"line_end":31,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":214},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":54684,"byte_end":54690,"line_start":112,"line_end":112,"column_start":9,"column_end":15},"name":"consts","qualname":"::binary16::consts","value":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"decl_id":null,"docs":" Useful `f16` constants.\n","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n             \"all constants moved to associated constants of [`f16`](../struct.f16.html)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":54550,"byte_end":54675,"line_start":108,"line_end":111,"column_start":1,"column_end":3}},{"value":"/ Useful `f16` constants.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":54697,"byte_end":54724,"line_start":113,"line_end":113,"column_start":5,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":218},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":54988,"byte_end":54994,"line_start":122,"line_end":122,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::consts::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of [`f16`](../struct.f16.html) significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of [`f16`](../struct.f16.html) significant digits in base 10.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":54751,"byte_end":54835,"line_start":117,"line_end":117,"column_start":5,"column_end":89}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::DIGITS`](../struct.f16.html#associatedconstant.DIGITS)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":54840,"byte_end":54973,"line_start":118,"line_end":121,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":219},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55379,"byte_end":55386,"line_start":131,"line_end":131,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::consts::EPSILON","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html)\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55019,"byte_end":55050,"line_start":123,"line_end":123,"column_start":5,"column_end":36}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55055,"byte_end":55130,"line_start":124,"line_end":124,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55135,"byte_end":55138,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55143,"byte_end":55224,"line_start":126,"line_end":126,"column_start":5,"column_end":86}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::EPSILON`](../struct.f16.html#associatedconstant.EPSILON)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55229,"byte_end":55364,"line_start":127,"line_end":130,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":220},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55626,"byte_end":55634,"line_start":137,"line_end":137,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::consts::INFINITY","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) positive Infinity (+∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) positive Infinity (+∞).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55412,"byte_end":55469,"line_start":132,"line_end":132,"column_start":5,"column_end":60}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::INFINITY`](../struct.f16.html#associatedconstant.INFINITY)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55474,"byte_end":55611,"line_start":133,"line_end":136,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":221},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55903,"byte_end":55918,"line_start":143,"line_end":143,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::consts::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of [`f16`](../struct.f16.html) significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of [`f16`](../struct.f16.html) significant digits in base 2.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55661,"byte_end":55732,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MANTISSA_DIGITS`](../struct.f16.html#associatedconstant.MANTISSA_DIGITS)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55737,"byte_end":55888,"line_start":139,"line_end":142,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":222},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56152,"byte_end":56155,"line_start":149,"line_end":149,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::consts::MAX","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Largest finite [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Largest finite [`f16`](../struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":55952,"byte_end":56005,"line_start":144,"line_end":144,"column_start":5,"column_end":58}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX`](../struct.f16.html#associatedconstant.MAX)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56010,"byte_end":56137,"line_start":145,"line_end":148,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":223},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56408,"byte_end":56418,"line_start":155,"line_end":155,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::consts::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](../struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](../struct.f16.html) power of 10 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56177,"byte_end":56247,"line_start":150,"line_end":150,"column_start":5,"column_end":75}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX_10_EXP`](../struct.f16.html#associatedconstant.MAX_10_EXP)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56252,"byte_end":56393,"line_start":151,"line_end":154,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":224},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56671,"byte_end":56678,"line_start":161,"line_end":161,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::consts::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](../struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](../struct.f16.html) power of 2 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56447,"byte_end":56516,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX_EXP`](../struct.f16.html#associatedconstant.MAX_EXP)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56521,"byte_end":56656,"line_start":157,"line_end":160,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":225},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56905,"byte_end":56908,"line_start":167,"line_end":167,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::consts::MIN","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest finite [`f16`](../struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56704,"byte_end":56758,"line_start":162,"line_end":162,"column_start":5,"column_end":59}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN`](../struct.f16.html#associatedconstant.MIN)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56763,"byte_end":56890,"line_start":163,"line_end":166,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":226},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57168,"byte_end":57178,"line_start":173,"line_end":173,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::consts::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal [`f16`](../struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`f16`](../struct.f16.html) power of 10 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":56930,"byte_end":57007,"line_start":168,"line_end":168,"column_start":5,"column_end":82}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_10_EXP`](../struct.f16.html#associatedconstant.MIN_10_EXP)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57012,"byte_end":57153,"line_start":169,"line_end":172,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":227},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57459,"byte_end":57466,"line_start":179,"line_end":179,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::consts::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`f16`](../struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`f16`](../struct.f16.html) power of 2 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57207,"byte_end":57304,"line_start":174,"line_end":174,"column_start":5,"column_end":102}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_EXP`](../struct.f16.html#associatedconstant.MIN_EXP)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57309,"byte_end":57444,"line_start":175,"line_end":178,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":228},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57720,"byte_end":57732,"line_start":185,"line_end":185,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::consts::MIN_POSITIVE","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`f16`](../struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57492,"byte_end":57555,"line_start":180,"line_end":180,"column_start":5,"column_end":68}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_POSITIVE`](../struct.f16.html#associatedconstant.MIN_POSITIVE)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57560,"byte_end":57705,"line_start":181,"line_end":184,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":229},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57961,"byte_end":57964,"line_start":191,"line_end":191,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::consts::NAN","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) Not a Number (NaN).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57763,"byte_end":57814,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::NAN`](../struct.f16.html#associatedconstant.NAN)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57819,"byte_end":57946,"line_start":187,"line_end":190,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":230},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58208,"byte_end":58220,"line_start":197,"line_end":197,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::consts::NEG_INFINITY","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) negative infinity (-∞).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":57986,"byte_end":58043,"line_start":192,"line_end":192,"column_start":5,"column_end":60}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::NEG_INFINITY`](../struct.f16.html#associatedconstant.NEG_INFINITY)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58048,"byte_end":58193,"line_start":193,"line_end":196,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":231},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58486,"byte_end":58491,"line_start":203,"line_end":203,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::consts::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`f16`](../struct.f16.html).\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`f16`](../struct.f16.html).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58251,"byte_end":58335,"line_start":198,"line_end":198,"column_start":5,"column_end":89}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::RADIX`](../struct.f16.html#associatedconstant.RADIX)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58340,"byte_end":58471,"line_start":199,"line_end":202,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":232},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58766,"byte_end":58788,"line_start":210,"line_end":210,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::consts::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`f16`](../struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58516,"byte_end":58581,"line_start":205,"line_end":205,"column_start":5,"column_end":70}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_POSITIVE_SUBNORMAL`](../struct.f16.html#associatedconstant.MIN_POSITIVE_SUBNORMAL)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58586,"byte_end":58751,"line_start":206,"line_end":209,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":233},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59052,"byte_end":59065,"line_start":216,"line_end":216,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::consts::MAX_SUBNORMAL","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Maximum subnormal [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`f16`](../struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58829,"byte_end":58885,"line_start":211,"line_end":211,"column_start":5,"column_end":61}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX_SUBNORMAL`](../struct.f16.html#associatedconstant.MAX_SUBNORMAL)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":58890,"byte_end":59037,"line_start":212,"line_end":215,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":234},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59278,"byte_end":59281,"line_start":223,"line_end":223,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::consts::ONE","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 1\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 1","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59098,"byte_end":59131,"line_start":218,"line_end":218,"column_start":5,"column_end":38}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::ONE`](../struct.f16.html#associatedconstant.ONE)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59136,"byte_end":59263,"line_start":219,"line_end":222,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":235},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59485,"byte_end":59489,"line_start":229,"line_end":229,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::consts::ZERO","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 0\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 0","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59303,"byte_end":59336,"line_start":224,"line_end":224,"column_start":5,"column_end":38}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::ZERO`](../struct.f16.html#associatedconstant.ZERO)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59341,"byte_end":59470,"line_start":225,"line_end":228,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":236},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59703,"byte_end":59711,"line_start":235,"line_end":235,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::consts::NEG_ZERO","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) -0\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) -0","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59512,"byte_end":59546,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::NEG_ZERO`](../struct.f16.html#associatedconstant.NEG_ZERO)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59551,"byte_end":59688,"line_start":231,"line_end":234,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":237},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59935,"byte_end":59936,"line_start":242,"line_end":242,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::consts::E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) Euler's number (ℯ).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) Euler's number (ℯ).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59739,"byte_end":59792,"line_start":237,"line_end":237,"column_start":5,"column_end":56}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::E`](../struct.f16.html#associatedconstant.E)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59797,"byte_end":59920,"line_start":238,"line_end":241,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":238},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60159,"byte_end":60161,"line_start":248,"line_end":248,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::consts::PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) Archimedes' constant (π).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) Archimedes' constant (π).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":59956,"byte_end":60014,"line_start":243,"line_end":243,"column_start":5,"column_end":62}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::PI`](../struct.f16.html#associatedconstant.PI)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60019,"byte_end":60144,"line_start":244,"line_end":247,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":239},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60377,"byte_end":60386,"line_start":254,"line_end":254,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::consts::FRAC_1_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 1/π\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 1/π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60182,"byte_end":60218,"line_start":249,"line_end":249,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_1_PI`](../struct.f16.html#associatedconstant.FRAC_1_PI)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60223,"byte_end":60362,"line_start":250,"line_end":253,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":240},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60619,"byte_end":60632,"line_start":260,"line_end":260,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::consts::FRAC_1_SQRT_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 1/√2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 1/√2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60414,"byte_end":60452,"line_start":255,"line_end":255,"column_start":5,"column_end":41}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_1_SQRT_2`](../struct.f16.html#associatedconstant.FRAC_1_SQRT_2)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60457,"byte_end":60604,"line_start":256,"line_end":259,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":241},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60859,"byte_end":60868,"line_start":266,"line_end":266,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::consts::FRAC_2_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 2/π\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 2/π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60664,"byte_end":60700,"line_start":261,"line_end":261,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_2_PI`](../struct.f16.html#associatedconstant.FRAC_2_PI)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60705,"byte_end":60844,"line_start":262,"line_end":265,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":242},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61104,"byte_end":61118,"line_start":272,"line_end":272,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::consts::FRAC_2_SQRT_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 2/√π\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 2/√π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60896,"byte_end":60935,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_2_SQRT_PI`](../struct.f16.html#associatedconstant.FRAC_2_SQRT_PI)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":60940,"byte_end":61089,"line_start":268,"line_end":271,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":243},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61346,"byte_end":61355,"line_start":278,"line_end":278,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::consts::FRAC_PI_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61151,"byte_end":61187,"line_start":273,"line_end":273,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_2`](../struct.f16.html#associatedconstant.FRAC_PI_2)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61192,"byte_end":61331,"line_start":274,"line_end":277,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61578,"byte_end":61587,"line_start":284,"line_end":284,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::consts::FRAC_PI_3","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/3\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/3","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61383,"byte_end":61419,"line_start":279,"line_end":279,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_3`](../struct.f16.html#associatedconstant.FRAC_PI_3)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61424,"byte_end":61563,"line_start":280,"line_end":283,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":245},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61810,"byte_end":61819,"line_start":290,"line_end":290,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::consts::FRAC_PI_4","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/4\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/4","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61615,"byte_end":61651,"line_start":285,"line_end":285,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_4`](../struct.f16.html#associatedconstant.FRAC_PI_4)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61656,"byte_end":61795,"line_start":286,"line_end":289,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":246},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62042,"byte_end":62051,"line_start":296,"line_end":296,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::consts::FRAC_PI_6","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/6\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/6","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61847,"byte_end":61883,"line_start":291,"line_end":291,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_6`](../struct.f16.html#associatedconstant.FRAC_PI_6)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":61888,"byte_end":62027,"line_start":292,"line_end":295,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":247},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62274,"byte_end":62283,"line_start":302,"line_end":302,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::consts::FRAC_PI_8","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/8\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/8","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62079,"byte_end":62115,"line_start":297,"line_end":297,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_8`](../struct.f16.html#associatedconstant.FRAC_PI_8)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62120,"byte_end":62259,"line_start":298,"line_end":301,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":248},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62505,"byte_end":62510,"line_start":308,"line_end":308,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::consts::LN_10","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗇 10","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62311,"byte_end":62354,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LN_10`](../struct.f16.html#associatedconstant.LN_10)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62359,"byte_end":62490,"line_start":304,"line_end":307,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":249},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62725,"byte_end":62729,"line_start":314,"line_end":314,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::consts::LN_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗇 2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62534,"byte_end":62576,"line_start":309,"line_end":309,"column_start":5,"column_end":41}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LN_2`](../struct.f16.html#associatedconstant.LN_2)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62581,"byte_end":62710,"line_start":310,"line_end":313,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":250},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62960,"byte_end":62967,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::consts::LOG10_E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62752,"byte_end":62805,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LOG10_E`](../struct.f16.html#associatedconstant.LOG10_E)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62810,"byte_end":62945,"line_start":316,"line_end":319,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":251},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63196,"byte_end":63202,"line_start":326,"line_end":326,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::consts::LOG2_E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":62993,"byte_end":63043,"line_start":321,"line_end":321,"column_start":5,"column_end":42}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LOG2_E`](../struct.f16.html#associatedconstant.LOG2_E)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63048,"byte_end":63181,"line_start":322,"line_end":325,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":252},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63416,"byte_end":63422,"line_start":332,"line_end":332,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::consts::SQRT_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) √2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) √2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63227,"byte_end":63263,"line_start":327,"line_end":327,"column_start":5,"column_end":39}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::SQRT_2`](../struct.f16.html#associatedconstant.SQRT_2)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63268,"byte_end":63401,"line_start":328,"line_end":331,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63556,"byte_end":63565,"line_start":338,"line_end":338,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<f16>::from_bits","value":"pub const fn from_bits(u16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from the raw bits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63461,"byte_end":63524,"line_start":336,"line_end":336,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63529,"byte_end":63538,"line_start":337,"line_end":337,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64130,"byte_end":64138,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<f16>::from_f32","value":"pub fn from_f32(f32) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 32-bit floating point value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63615,"byte_end":63695,"line_start":342,"line_end":342,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63700,"byte_end":63703,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63708,"byte_end":63796,"line_start":344,"line_end":344,"column_start":5,"column_end":90}},{"value":"/ preserved. 32-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63801,"byte_end":63895,"line_start":345,"line_end":345,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63900,"byte_end":63994,"line_start":346,"line_end":346,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63999,"byte_end":64089,"line_start":347,"line_end":347,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64094,"byte_end":64104,"line_start":348,"line_end":348,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64109,"byte_end":64118,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64726,"byte_end":64734,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<f16>::from_f64","value":"pub fn from_f64(f64) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 64-bit floating point value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64211,"byte_end":64291,"line_start":354,"line_end":354,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64296,"byte_end":64299,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64304,"byte_end":64392,"line_start":356,"line_end":356,"column_start":5,"column_end":90}},{"value":"/ preserved. 64-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64397,"byte_end":64491,"line_start":357,"line_end":357,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64496,"byte_end":64590,"line_start":358,"line_end":358,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64595,"byte_end":64685,"line_start":359,"line_end":359,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64690,"byte_end":64700,"line_start":360,"line_end":360,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64705,"byte_end":64714,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64918,"byte_end":64925,"line_start":368,"line_end":368,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<f16>::to_bits","value":"pub const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) into the underlying bit representation.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64807,"byte_end":64886,"line_start":366,"line_end":366,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64891,"byte_end":64900,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65310,"byte_end":65321,"line_start":383,"line_end":383,"column_start":12,"column_end":23},"name":"to_le_bytes","qualname":"<f16>::to_le_bytes","value":"pub fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":64967,"byte_end":65059,"line_start":372,"line_end":372,"column_start":5,"column_end":97}},{"value":"/ little-endian byte order.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65064,"byte_end":65093,"line_start":373,"line_end":373,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65098,"byte_end":65101,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65106,"byte_end":65120,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65125,"byte_end":65128,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65133,"byte_end":65144,"line_start":377,"line_end":377,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65149,"byte_end":65176,"line_start":378,"line_end":378,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65181,"byte_end":65231,"line_start":379,"line_end":379,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x40, 0x4A]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65236,"byte_end":65272,"line_start":380,"line_end":380,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65277,"byte_end":65284,"line_start":381,"line_end":381,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65289,"byte_end":65298,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65731,"byte_end":65742,"line_start":398,"line_end":398,"column_start":12,"column_end":23},"name":"to_be_bytes","qualname":"<f16>::to_be_bytes","value":"pub fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65381,"byte_end":65473,"line_start":387,"line_end":387,"column_start":5,"column_end":97}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65478,"byte_end":65514,"line_start":388,"line_end":388,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65519,"byte_end":65522,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65527,"byte_end":65541,"line_start":390,"line_end":390,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65546,"byte_end":65549,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65554,"byte_end":65565,"line_start":392,"line_end":392,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65570,"byte_end":65597,"line_start":393,"line_end":393,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65602,"byte_end":65652,"line_start":394,"line_end":394,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x4A, 0x40]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65657,"byte_end":65693,"line_start":395,"line_end":395,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65698,"byte_end":65705,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65710,"byte_end":65719,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66393,"byte_end":66404,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"to_ne_bytes","qualname":"<f16>::to_ne_bytes","value":"pub fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65802,"byte_end":65894,"line_start":402,"line_end":402,"column_start":5,"column_end":97}},{"value":"/ native byte order.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65899,"byte_end":65921,"line_start":403,"line_end":403,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65926,"byte_end":65929,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use `to_be_bytes`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":65934,"byte_end":66028,"line_start":405,"line_end":405,"column_start":5,"column_end":99}},{"value":"/ or `to_le_bytes`, as appropriate, instead.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66033,"byte_end":66079,"line_start":406,"line_end":406,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66084,"byte_end":66087,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66092,"byte_end":66106,"line_start":408,"line_end":408,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66111,"byte_end":66114,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66119,"byte_end":66130,"line_start":410,"line_end":410,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66135,"byte_end":66162,"line_start":411,"line_end":411,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66167,"byte_end":66217,"line_start":412,"line_end":412,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66222,"byte_end":66276,"line_start":413,"line_end":413,"column_start":5,"column_end":59}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66281,"byte_end":66301,"line_start":414,"line_end":414,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66306,"byte_end":66318,"line_start":415,"line_end":415,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66323,"byte_end":66343,"line_start":416,"line_end":416,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66348,"byte_end":66355,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66360,"byte_end":66367,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66372,"byte_end":66381,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66778,"byte_end":66791,"line_start":434,"line_end":434,"column_start":12,"column_end":25},"name":"from_le_bytes","qualname":"<f16>::from_le_bytes","value":"pub fn from_le_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66464,"byte_end":66555,"line_start":424,"line_end":424,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66560,"byte_end":66563,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66568,"byte_end":66582,"line_start":426,"line_end":426,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66587,"byte_end":66590,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66595,"byte_end":66606,"line_start":428,"line_end":428,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66611,"byte_end":66638,"line_start":429,"line_end":429,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_le_bytes([0x40, 0x4A]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66643,"byte_end":66692,"line_start":430,"line_end":430,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66697,"byte_end":66740,"line_start":431,"line_end":431,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66745,"byte_end":66752,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66757,"byte_end":66766,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67189,"byte_end":67202,"line_start":448,"line_end":448,"column_start":12,"column_end":25},"name":"from_be_bytes","qualname":"<f16>::from_be_bytes","value":"pub fn from_be_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66878,"byte_end":66966,"line_start":438,"line_end":438,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66971,"byte_end":66974,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66979,"byte_end":66993,"line_start":440,"line_end":440,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":66998,"byte_end":67001,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67006,"byte_end":67017,"line_start":442,"line_end":442,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67022,"byte_end":67049,"line_start":443,"line_end":443,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_be_bytes([0x4A, 0x40]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67054,"byte_end":67103,"line_start":444,"line_end":444,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67108,"byte_end":67151,"line_start":445,"line_end":445,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67156,"byte_end":67163,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67168,"byte_end":67177,"line_start":447,"line_end":447,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67870,"byte_end":67883,"line_start":469,"line_end":469,"column_start":12,"column_end":25},"name":"from_ne_bytes","qualname":"<f16>::from_ne_bytes","value":"pub fn from_ne_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67289,"byte_end":67380,"line_start":452,"line_end":452,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67385,"byte_end":67388,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67393,"byte_end":67482,"line_start":454,"line_end":454,"column_start":5,"column_end":94}},{"value":"/ `from_be_bytes` or `from_le_bytes`, as appropriate instead.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67487,"byte_end":67550,"line_start":455,"line_end":455,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67555,"byte_end":67558,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67563,"byte_end":67577,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67582,"byte_end":67585,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67590,"byte_end":67601,"line_start":459,"line_end":459,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67606,"byte_end":67633,"line_start":460,"line_end":460,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67638,"byte_end":67705,"line_start":461,"line_end":461,"column_start":5,"column_end":72}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67710,"byte_end":67730,"line_start":462,"line_end":462,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67735,"byte_end":67747,"line_start":463,"line_end":463,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67752,"byte_end":67772,"line_start":464,"line_end":464,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67777,"byte_end":67784,"line_start":465,"line_end":465,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67789,"byte_end":67832,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67837,"byte_end":67844,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67849,"byte_end":67858,"line_start":468,"line_end":468,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68160,"byte_end":68167,"line_start":476,"line_end":476,"column_start":12,"column_end":19},"name":"as_bits","qualname":"<f16>::as_bits","value":"pub fn as_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) into the underlying bit representation.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":67970,"byte_end":68049,"line_start":473,"line_end":473,"column_start":5,"column_end":84}},{"value":"deprecated(since = \"1.2.0\", note =\n             \"renamed to [`to_bits`](#method.to_bits)\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68054,"byte_end":68134,"line_start":474,"line_end":474,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68139,"byte_end":68148,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68449,"byte_end":68455,"line_start":485,"line_end":485,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<f16>::to_f32","value":"pub fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) value into a `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) value into a `f32` value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68217,"byte_end":68282,"line_start":480,"line_end":480,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68287,"byte_end":68290,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68295,"byte_end":68389,"line_start":482,"line_end":482,"column_start":5,"column_end":99}},{"value":"/ in 32-bit floating point.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68394,"byte_end":68423,"line_start":483,"line_end":483,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68428,"byte_end":68437,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68750,"byte_end":68756,"line_start":494,"line_end":494,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<f16>::to_f64","value":"pub fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) value into a `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) value into a `f64` value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68518,"byte_end":68583,"line_start":489,"line_end":489,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68588,"byte_end":68591,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68596,"byte_end":68690,"line_start":491,"line_end":491,"column_start":5,"column_end":99}},{"value":"/ in 64-bit floating point.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68695,"byte_end":68724,"line_start":492,"line_end":492,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68729,"byte_end":68738,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69155,"byte_end":69161,"line_start":512,"line_end":512,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<f16>::is_nan","value":"pub const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is `NaN` and `false` otherwise.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68819,"byte_end":68883,"line_start":498,"line_end":498,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68888,"byte_end":68891,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68896,"byte_end":68910,"line_start":500,"line_end":500,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68915,"byte_end":68918,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68923,"byte_end":68934,"line_start":502,"line_end":502,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68939,"byte_end":68966,"line_start":503,"line_end":503,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68971,"byte_end":68974,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":68979,"byte_end":69002,"line_start":505,"line_end":505,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69007,"byte_end":69042,"line_start":506,"line_end":506,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69047,"byte_end":69050,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69055,"byte_end":69081,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69086,"byte_end":69111,"line_start":509,"line_end":509,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69116,"byte_end":69123,"line_start":510,"line_end":510,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69128,"byte_end":69137,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69740,"byte_end":69751,"line_start":536,"line_end":536,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<f16>::is_infinite","value":"pub const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false`\n otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69228,"byte_end":69281,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/ otherwise.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69286,"byte_end":69300,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69305,"byte_end":69308,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69313,"byte_end":69327,"line_start":519,"line_end":519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69332,"byte_end":69335,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69340,"byte_end":69351,"line_start":521,"line_end":521,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69356,"byte_end":69383,"line_start":522,"line_end":522,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69388,"byte_end":69391,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69396,"byte_end":69430,"line_start":524,"line_end":524,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69435,"byte_end":69463,"line_start":525,"line_end":525,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69468,"byte_end":69504,"line_start":526,"line_end":526,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69509,"byte_end":69532,"line_start":527,"line_end":527,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69537,"byte_end":69540,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69545,"byte_end":69575,"line_start":529,"line_end":529,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69580,"byte_end":69612,"line_start":530,"line_end":530,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69617,"byte_end":69620,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69625,"byte_end":69656,"line_start":532,"line_end":532,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69661,"byte_end":69696,"line_start":533,"line_end":533,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69701,"byte_end":69708,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69713,"byte_end":69722,"line_start":535,"line_end":535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70316,"byte_end":70325,"line_start":559,"line_end":559,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<f16>::is_finite","value":"pub const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor `NaN`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69819,"byte_end":69883,"line_start":540,"line_end":540,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69888,"byte_end":69891,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69896,"byte_end":69910,"line_start":542,"line_end":542,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69915,"byte_end":69918,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69923,"byte_end":69934,"line_start":544,"line_end":544,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69939,"byte_end":69966,"line_start":545,"line_end":545,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69971,"byte_end":69974,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":69979,"byte_end":70013,"line_start":547,"line_end":547,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70018,"byte_end":70046,"line_start":548,"line_end":548,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70051,"byte_end":70087,"line_start":549,"line_end":549,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70092,"byte_end":70115,"line_start":550,"line_end":550,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70120,"byte_end":70123,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70128,"byte_end":70155,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70160,"byte_end":70163,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70168,"byte_end":70198,"line_start":554,"line_end":554,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70203,"byte_end":70233,"line_start":555,"line_end":555,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70238,"byte_end":70272,"line_start":556,"line_end":556,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70277,"byte_end":70284,"line_start":557,"line_end":557,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70289,"byte_end":70298,"line_start":558,"line_end":558,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71073,"byte_end":71082,"line_start":585,"line_end":585,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<f16>::is_normal","value":"pub fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70393,"byte_end":70473,"line_start":563,"line_end":563,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70478,"byte_end":70481,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70486,"byte_end":70500,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70505,"byte_end":70508,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70513,"byte_end":70524,"line_start":567,"line_end":567,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70529,"byte_end":70556,"line_start":568,"line_end":568,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70561,"byte_end":70564,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ let min = f16::MIN_POSITIVE;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70569,"byte_end":70601,"line_start":570,"line_end":570,"column_start":5,"column_end":37}},{"value":"/ let max = f16::MAX;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70606,"byte_end":70629,"line_start":571,"line_end":571,"column_start":5,"column_end":28}},{"value":"/ let lower_than_min = f16::from_f32(1.0e-10_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70634,"byte_end":70686,"line_start":572,"line_end":572,"column_start":5,"column_end":57}},{"value":"/ let zero = f16::from_f32(0.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70691,"byte_end":70729,"line_start":573,"line_end":573,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70734,"byte_end":70737,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70742,"byte_end":70771,"line_start":575,"line_end":575,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70776,"byte_end":70805,"line_start":576,"line_end":576,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70810,"byte_end":70813,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70818,"byte_end":70849,"line_start":578,"line_end":578,"column_start":5,"column_end":36}},{"value":"/ assert!(!f16::NAN.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70854,"byte_end":70889,"line_start":579,"line_end":579,"column_start":5,"column_end":40}},{"value":"/ assert!(!f16::INFINITY.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70894,"byte_end":70934,"line_start":580,"line_end":580,"column_start":5,"column_end":45}},{"value":"/ // Values between `0` and `min` are Subnormal.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70939,"byte_end":70989,"line_start":581,"line_end":581,"column_start":5,"column_end":55}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":70994,"byte_end":71035,"line_start":582,"line_end":582,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71040,"byte_end":71047,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71052,"byte_end":71061,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71716,"byte_end":71724,"line_start":607,"line_end":607,"column_start":12,"column_end":20},"name":"classify","qualname":"<f16>::classify","value":"pub fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71185,"byte_end":71239,"line_start":590,"line_end":590,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71244,"byte_end":71247,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71252,"byte_end":71342,"line_start":592,"line_end":592,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71347,"byte_end":71369,"line_start":593,"line_end":593,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71374,"byte_end":71377,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71382,"byte_end":71396,"line_start":595,"line_end":595,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71401,"byte_end":71404,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71409,"byte_end":71420,"line_start":597,"line_end":597,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71425,"byte_end":71454,"line_start":598,"line_end":598,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71459,"byte_end":71486,"line_start":599,"line_end":599,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71491,"byte_end":71494,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let num = f16::from_f32(12.4_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71499,"byte_end":71537,"line_start":601,"line_end":601,"column_start":5,"column_end":43}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71542,"byte_end":71570,"line_start":602,"line_end":602,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71575,"byte_end":71578,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71583,"byte_end":71634,"line_start":604,"line_end":604,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71639,"byte_end":71692,"line_start":605,"line_end":605,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":71697,"byte_end":71704,"line_start":606,"line_end":606,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72665,"byte_end":72671,"line_start":637,"line_end":637,"column_start":12,"column_end":18},"name":"signum","qualname":"<f16>::signum","value":"pub fn signum(Self) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72092,"byte_end":72148,"line_start":619,"line_end":619,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72153,"byte_end":72156,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72161,"byte_end":72220,"line_start":621,"line_end":621,"column_start":5,"column_end":64}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72225,"byte_end":72289,"line_start":622,"line_end":622,"column_start":5,"column_end":69}},{"value":"/ * `NAN` if the number is `NAN`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72294,"byte_end":72328,"line_start":623,"line_end":623,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72333,"byte_end":72336,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72341,"byte_end":72355,"line_start":625,"line_end":625,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72360,"byte_end":72363,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72368,"byte_end":72379,"line_start":627,"line_end":627,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72384,"byte_end":72411,"line_start":628,"line_end":628,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72416,"byte_end":72419,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(3.5_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72424,"byte_end":72459,"line_start":630,"line_end":630,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72464,"byte_end":72467,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), f16::from_f32(1.0));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72472,"byte_end":72519,"line_start":632,"line_end":632,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(f16::NEG_INFINITY.signum(), f16::from_f32(-1.0));","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72524,"byte_end":72588,"line_start":633,"line_end":633,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72593,"byte_end":72596,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.signum().is_nan());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72601,"byte_end":72641,"line_start":635,"line_end":635,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72646,"byte_end":72653,"line_start":636,"line_end":636,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73455,"byte_end":73471,"line_start":665,"line_end":665,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<f16>::is_sign_positive","value":"pub const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72876,"byte_end":72969,"line_start":647,"line_end":647,"column_start":5,"column_end":98}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":72974,"byte_end":73005,"line_start":648,"line_end":648,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73010,"byte_end":73013,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73018,"byte_end":73032,"line_start":650,"line_end":650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73037,"byte_end":73040,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73045,"byte_end":73056,"line_start":652,"line_end":652,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73061,"byte_end":73088,"line_start":653,"line_end":653,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73093,"byte_end":73096,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73101,"byte_end":73124,"line_start":655,"line_end":655,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73129,"byte_end":73164,"line_start":656,"line_end":656,"column_start":5,"column_end":40}},{"value":"/ let g = f16::from_f32(-7.0_f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73169,"byte_end":73205,"line_start":657,"line_end":657,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73210,"byte_end":73213,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73218,"byte_end":73252,"line_start":659,"line_end":659,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73257,"byte_end":73292,"line_start":660,"line_end":660,"column_start":5,"column_end":40}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73297,"byte_end":73344,"line_start":661,"line_end":661,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73349,"byte_end":73411,"line_start":662,"line_end":662,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73416,"byte_end":73423,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73428,"byte_end":73437,"line_start":664,"line_end":664,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74110,"byte_end":74126,"line_start":687,"line_end":687,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<f16>::is_sign_negative","value":"pub const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73531,"byte_end":73624,"line_start":669,"line_end":669,"column_start":5,"column_end":98}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73629,"byte_end":73662,"line_start":670,"line_end":670,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73667,"byte_end":73670,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73675,"byte_end":73689,"line_start":672,"line_end":672,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73694,"byte_end":73697,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73702,"byte_end":73713,"line_start":674,"line_end":674,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73718,"byte_end":73745,"line_start":675,"line_end":675,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73750,"byte_end":73753,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73758,"byte_end":73781,"line_start":677,"line_end":677,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73786,"byte_end":73820,"line_start":678,"line_end":678,"column_start":5,"column_end":39}},{"value":"/ let g = f16::from_f32(-7.0f32);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73825,"byte_end":73860,"line_start":679,"line_end":679,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73865,"byte_end":73868,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73873,"byte_end":73908,"line_start":681,"line_end":681,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73913,"byte_end":73947,"line_start":682,"line_end":682,"column_start":5,"column_end":39}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":73952,"byte_end":73999,"line_start":683,"line_end":683,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74004,"byte_end":74066,"line_start":684,"line_end":684,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74071,"byte_end":74078,"line_start":685,"line_end":685,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74083,"byte_end":74092,"line_start":686,"line_end":686,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":281},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74282,"byte_end":74288,"line_start":692,"line_end":692,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::f16::DIGITS","value":"u32","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Approximate number of [`f16`](struct.f16.html) significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of [`f16`](struct.f16.html) significant digits in base 10.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74186,"byte_end":74267,"line_start":691,"line_end":691,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":282},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74520,"byte_end":74527,"line_start":697,"line_end":697,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::f16::EPSILON","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html)\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74303,"byte_end":74331,"line_start":693,"line_end":693,"column_start":5,"column_end":33}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74336,"byte_end":74411,"line_start":694,"line_end":694,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74416,"byte_end":74419,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74424,"byte_end":74505,"line_start":696,"line_end":696,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":283},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74624,"byte_end":74632,"line_start":699,"line_end":699,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::f16::INFINITY","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) positive Infinity (+∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) positive Infinity (+∞).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74555,"byte_end":74609,"line_start":698,"line_end":698,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":284},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74743,"byte_end":74758,"line_start":701,"line_end":701,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::f16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Number of [`f16`](struct.f16.html) significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of [`f16`](struct.f16.html) significant digits in base 2.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74660,"byte_end":74728,"line_start":700,"line_end":700,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":285},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74839,"byte_end":74842,"line_start":703,"line_end":703,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::f16::MAX","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Largest finite [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Largest finite [`f16`](struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74774,"byte_end":74824,"line_start":702,"line_end":702,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":286},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74949,"byte_end":74959,"line_start":705,"line_end":705,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::f16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](struct.f16.html) power of 10 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74867,"byte_end":74934,"line_start":704,"line_end":704,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":287},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75055,"byte_end":75062,"line_start":707,"line_end":707,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::f16::MAX_EXP","value":"i32","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](struct.f16.html) power of 2 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":74974,"byte_end":75040,"line_start":706,"line_end":706,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":288},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75144,"byte_end":75147,"line_start":709,"line_end":709,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::f16::MIN","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Smallest finite [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest finite [`f16`](struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75078,"byte_end":75129,"line_start":708,"line_end":708,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":289},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75261,"byte_end":75271,"line_start":711,"line_end":711,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::f16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Minimum possible normal [`f16`](struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`f16`](struct.f16.html) power of 10 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75172,"byte_end":75246,"line_start":710,"line_end":710,"column_start":5,"column_end":79}}]},{"kind":"Const","id":{"krate":0,"index":290},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75396,"byte_end":75403,"line_start":713,"line_end":713,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::f16::MIN_EXP","value":"i32","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`f16`](struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`f16`](struct.f16.html) power of 2 exponent.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75287,"byte_end":75381,"line_start":712,"line_end":712,"column_start":5,"column_end":99}}]},{"kind":"Const","id":{"krate":0,"index":291},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75495,"byte_end":75507,"line_start":715,"line_end":715,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::f16::MIN_POSITIVE","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Smallest positive normal [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`f16`](struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75420,"byte_end":75480,"line_start":714,"line_end":714,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":292},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75598,"byte_end":75601,"line_start":717,"line_end":717,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::f16::NAN","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) Not a Number (NaN).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75535,"byte_end":75583,"line_start":716,"line_end":716,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":293},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75698,"byte_end":75710,"line_start":719,"line_end":719,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::f16::NEG_INFINITY","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) negative infinity (-∞).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75629,"byte_end":75683,"line_start":718,"line_end":718,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":294},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75834,"byte_end":75839,"line_start":721,"line_end":721,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::f16::RADIX","value":"u32","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`f16`](struct.f16.html).\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`f16`](struct.f16.html).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75738,"byte_end":75819,"line_start":720,"line_end":720,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":295},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75932,"byte_end":75954,"line_start":724,"line_end":724,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::f16::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`f16`](struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75855,"byte_end":75917,"line_start":723,"line_end":723,"column_start":5,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76050,"byte_end":76063,"line_start":726,"line_end":726,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::f16::MAX_SUBNORMAL","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" Maximum subnormal [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`f16`](struct.f16.html) value.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":75982,"byte_end":76035,"line_start":725,"line_end":725,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":297},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76137,"byte_end":76140,"line_start":729,"line_end":729,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::f16::ONE","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 1\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 1","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76092,"byte_end":76122,"line_start":728,"line_end":728,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":298},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76213,"byte_end":76217,"line_start":731,"line_end":731,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::f16::ZERO","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 0\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 0","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76168,"byte_end":76198,"line_start":730,"line_end":730,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":299},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76291,"byte_end":76299,"line_start":733,"line_end":733,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::f16::NEG_ZERO","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) -0\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) -0","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76245,"byte_end":76276,"line_start":732,"line_end":732,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":300},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76393,"byte_end":76394,"line_start":736,"line_end":736,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::f16::E","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) Euler's number (ℯ).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) Euler's number (ℯ).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76328,"byte_end":76378,"line_start":735,"line_end":735,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":301},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76492,"byte_end":76494,"line_start":738,"line_end":738,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::f16::PI","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) Archimedes' constant (π).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) Archimedes' constant (π).","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76422,"byte_end":76477,"line_start":737,"line_end":737,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":302},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76570,"byte_end":76579,"line_start":740,"line_end":740,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::f16::FRAC_1_PI","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 1/π\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 1/π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76522,"byte_end":76555,"line_start":739,"line_end":739,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":303},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76657,"byte_end":76670,"line_start":742,"line_end":742,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::f16::FRAC_1_SQRT_2","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 1/√2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 1/√2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76607,"byte_end":76642,"line_start":741,"line_end":741,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":304},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76746,"byte_end":76755,"line_start":744,"line_end":744,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::f16::FRAC_2_PI","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 2/π\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 2/π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76698,"byte_end":76731,"line_start":743,"line_end":743,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":305},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76834,"byte_end":76848,"line_start":746,"line_end":746,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::f16::FRAC_2_SQRT_PI","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 2/√π\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 2/√π","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76783,"byte_end":76819,"line_start":745,"line_end":745,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":306},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76924,"byte_end":76933,"line_start":748,"line_end":748,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::f16::FRAC_PI_2","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76876,"byte_end":76909,"line_start":747,"line_end":747,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":307},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77009,"byte_end":77018,"line_start":750,"line_end":750,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::f16::FRAC_PI_3","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/3\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/3","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":76961,"byte_end":76994,"line_start":749,"line_end":749,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":308},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77094,"byte_end":77103,"line_start":752,"line_end":752,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::f16::FRAC_PI_4","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/4\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/4","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77046,"byte_end":77079,"line_start":751,"line_end":751,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":309},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77179,"byte_end":77188,"line_start":754,"line_end":754,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::f16::FRAC_PI_6","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/6\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/6","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77131,"byte_end":77164,"line_start":753,"line_end":753,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":310},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77264,"byte_end":77273,"line_start":756,"line_end":756,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::f16::FRAC_PI_8","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/8\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/8","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77216,"byte_end":77249,"line_start":755,"line_end":755,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":311},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77356,"byte_end":77361,"line_start":758,"line_end":758,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::f16::LN_10","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗇 10","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77301,"byte_end":77341,"line_start":757,"line_end":757,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":312},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77443,"byte_end":77447,"line_start":760,"line_end":760,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::f16::LN_2","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗇 2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77389,"byte_end":77428,"line_start":759,"line_end":759,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":313},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77540,"byte_end":77547,"line_start":762,"line_end":762,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::f16::LOG10_E","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77475,"byte_end":77525,"line_start":761,"line_end":761,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":314},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77638,"byte_end":77645,"line_start":764,"line_end":764,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::binary16::f16::LOG10_2","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77575,"byte_end":77623,"line_start":763,"line_end":763,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":315},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77735,"byte_end":77741,"line_start":766,"line_end":766,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::f16::LOG2_E","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77673,"byte_end":77720,"line_start":765,"line_end":765,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":316},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77830,"byte_end":77837,"line_start":768,"line_end":768,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::binary16::f16::LOG2_10","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₂10","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77769,"byte_end":77815,"line_start":767,"line_end":767,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":317},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77913,"byte_end":77919,"line_start":770,"line_end":770,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::f16::SQRT_2","value":"f16","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) √2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) √2","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":77865,"byte_end":77898,"line_start":769,"line_end":769,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":353},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":374},{"krate":0,"index":379},{"krate":0,"index":392},{"krate":0,"index":403},{"krate":0,"index":410},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"decl_id":null,"docs":" Contains utility functions and traits to convert between slices of `u16` bits and `f16` or\n `bf16` numbers.","sig":null,"attributes":[{"value":"/ Contains utility functions and traits to convert between slices of `u16` bits and `f16` or","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120445,"byte_end":120539,"line_start":1,"line_end":1,"column_start":1,"column_end":95}},{"value":"/ `bf16` numbers.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120540,"byte_end":120559,"line_start":2,"line_end":2,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120560,"byte_end":120563,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The utility [`HalfBitsSliceExt`] sealed extension trait is implemented for `[u16]` slices,","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120564,"byte_end":120658,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ while the utility [`HalfFloatSliceExt`] sealed extension trait is implemented for both `[f16]`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120659,"byte_end":120757,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ and `[bf16]` slices. These traits provide efficient conversions and reinterpret casting of","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120758,"byte_end":120852,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ larger buffers of floating point values, and are automatically included in the [`prelude`]","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120853,"byte_end":120947,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ module.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120948,"byte_end":120959,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120960,"byte_end":120963,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`HalfBitsSliceExt`]: trait.HalfBitsSliceExt.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":120964,"byte_end":121017,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/ [`HalfFloatSliceExt`]: trait.HalfFloatSliceExt.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121018,"byte_end":121073,"line_start":11,"line_end":11,"column_start":1,"column_end":56}},{"value":"/ [`prelude`]: ../prelude/index.html","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121074,"byte_end":121112,"line_start":12,"line_end":12,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":367},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121434,"byte_end":121451,"line_start":23,"line_end":23,"column_start":11,"column_end":28},"name":"HalfFloatSliceExt","qualname":"::slice::HalfFloatSliceExt","value":"HalfFloatSliceExt: private::SealedHalfFloatSlice","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373}],"decl_id":null,"docs":" Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121250,"byte_end":121345,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121346,"byte_end":121349,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121350,"byte_end":121423,"line_start":22,"line_end":22,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122120,"byte_end":122136,"line_start":39,"line_end":39,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast","value":"pub fn reinterpret_cast(&Self) -> &[u16]","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Reinterpret a slice of [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)\n numbers as a slice of `u16` bits.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121489,"byte_end":121576,"line_start":24,"line_end":24,"column_start":5,"column_end":92}},{"value":"/ numbers as a slice of `u16` bits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121581,"byte_end":121618,"line_start":25,"line_end":25,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121623,"byte_end":121626,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121631,"byte_end":121722,"line_start":27,"line_end":27,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121727,"byte_end":121750,"line_start":28,"line_end":28,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121755,"byte_end":121758,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121763,"byte_end":121777,"line_start":30,"line_end":30,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121782,"byte_end":121785,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121790,"byte_end":121801,"line_start":32,"line_end":32,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121806,"byte_end":121833,"line_start":33,"line_end":33,"column_start":5,"column_end":32}},{"value":"/ let float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121838,"byte_end":121919,"line_start":34,"line_end":34,"column_start":5,"column_end":86}},{"value":"/ let int_buffer = float_buffer.reinterpret_cast();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121924,"byte_end":121977,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121982,"byte_end":121985,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(int_buffer, [float_buffer[0].to_bits(), float_buffer[1].to_bits(), float_buffer[2].to_bits()]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121990,"byte_end":122100,"line_start":37,"line_end":37,"column_start":5,"column_end":115}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122105,"byte_end":122112,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123237,"byte_end":123257,"line_start":65,"line_end":65,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast_mut","value":"pub fn reinterpret_cast_mut(&mut Self) -> &mut [u16]","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) numbers as a mutable slice of `u16` bits.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of [`f16`](../struct.f16.html) or","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122160,"byte_end":122225,"line_start":41,"line_end":41,"column_start":5,"column_end":70}},{"value":"/ [`bf16`](../struct.bf16.html) numbers as a mutable slice of `u16` bits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122230,"byte_end":122305,"line_start":42,"line_end":42,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122310,"byte_end":122313,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122318,"byte_end":122412,"line_start":44,"line_end":44,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [u16]` is borrowed.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122417,"byte_end":122501,"line_start":45,"line_end":45,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122506,"byte_end":122509,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122514,"byte_end":122528,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122533,"byte_end":122536,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122541,"byte_end":122552,"line_start":49,"line_end":49,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122557,"byte_end":122584,"line_start":50,"line_end":50,"column_start":5,"column_end":32}},{"value":"/ let mut float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122589,"byte_end":122674,"line_start":51,"line_end":51,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122679,"byte_end":122682,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122687,"byte_end":122692,"line_start":53,"line_end":53,"column_start":5,"column_end":10}},{"value":"/     let int_buffer = float_buffer.reinterpret_cast_mut();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122697,"byte_end":122758,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122763,"byte_end":122766,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(int_buffer, [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122771,"byte_end":122891,"line_start":56,"line_end":56,"column_start":5,"column_end":125}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122896,"byte_end":122899,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/     // Mutating the u16 slice will mutating the original","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122904,"byte_end":122964,"line_start":58,"line_end":58,"column_start":5,"column_end":65}},{"value":"/     int_buffer[0] = 0;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":122969,"byte_end":122995,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123000,"byte_end":123005,"line_start":60,"line_end":60,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123010,"byte_end":123013,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop int_buffer before using float_buffer again or we will get a borrow error.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123018,"byte_end":123124,"line_start":62,"line_end":62,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(0.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123129,"byte_end":123217,"line_start":63,"line_end":63,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123222,"byte_end":123229,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124402,"byte_end":124424,"line_start":95,"line_end":95,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f32_slice","value":"pub fn convert_from_f32_slice(&mut Self, &[f32])","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Convert all of the elements of a `[f32]` slice into [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) values in `self`.","sig":null,"attributes":[{"value":"/ Convert all of the elements of a `[f32]` slice into [`f16`](../struct.f16.html) or","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123289,"byte_end":123375,"line_start":67,"line_end":67,"column_start":5,"column_end":91}},{"value":"/ [`bf16`](../struct.bf16.html) values in `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123380,"byte_end":123431,"line_start":68,"line_end":68,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123436,"byte_end":123439,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123444,"byte_end":123495,"line_start":70,"line_end":70,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123500,"byte_end":123503,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123508,"byte_end":123601,"line_start":72,"line_end":72,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123606,"byte_end":123691,"line_start":73,"line_end":73,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123696,"byte_end":123786,"line_start":74,"line_end":74,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123791,"byte_end":123814,"line_start":75,"line_end":75,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123819,"byte_end":123822,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123827,"byte_end":123839,"line_start":77,"line_end":77,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123844,"byte_end":123847,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123852,"byte_end":123922,"line_start":79,"line_end":79,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123927,"byte_end":123930,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123935,"byte_end":123949,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123954,"byte_end":123965,"line_start":82,"line_end":82,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":123970,"byte_end":123997,"line_start":83,"line_end":83,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124002,"byte_end":124035,"line_start":84,"line_end":84,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124040,"byte_end":124071,"line_start":85,"line_end":85,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124076,"byte_end":124130,"line_start":86,"line_end":86,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124135,"byte_end":124138,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124143,"byte_end":124183,"line_start":88,"line_end":88,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124188,"byte_end":124191,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124196,"byte_end":124214,"line_start":90,"line_end":90,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f32_slice(&float_values);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124219,"byte_end":124268,"line_start":91,"line_end":91,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124273,"byte_end":124276,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124281,"byte_end":124382,"line_start":93,"line_end":93,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124387,"byte_end":124394,"line_start":94,"line_end":94,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125568,"byte_end":125590,"line_start":125,"line_end":125,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f64_slice","value":"pub fn convert_from_f64_slice(&mut Self, &[f64])","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Convert all of the elements of a `[f64]` slice into [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) values in `self`.","sig":null,"attributes":[{"value":"/ Convert all of the elements of a `[f64]` slice into [`f16`](../struct.f16.html) or","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124455,"byte_end":124541,"line_start":97,"line_end":97,"column_start":5,"column_end":91}},{"value":"/ [`bf16`](../struct.bf16.html) values in `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124546,"byte_end":124597,"line_start":98,"line_end":98,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124602,"byte_end":124605,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124610,"byte_end":124661,"line_start":100,"line_end":100,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124666,"byte_end":124669,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124674,"byte_end":124767,"line_start":102,"line_end":102,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124772,"byte_end":124857,"line_start":103,"line_end":103,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124862,"byte_end":124952,"line_start":104,"line_end":104,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124957,"byte_end":124980,"line_start":105,"line_end":105,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124985,"byte_end":124988,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":124993,"byte_end":125005,"line_start":107,"line_end":107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125010,"byte_end":125013,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125018,"byte_end":125088,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125093,"byte_end":125096,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125101,"byte_end":125115,"line_start":111,"line_end":111,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125120,"byte_end":125131,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125136,"byte_end":125163,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125168,"byte_end":125201,"line_start":114,"line_end":114,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125206,"byte_end":125237,"line_start":115,"line_end":115,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125242,"byte_end":125296,"line_start":116,"line_end":116,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125301,"byte_end":125304,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125309,"byte_end":125349,"line_start":118,"line_end":118,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125354,"byte_end":125357,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125362,"byte_end":125380,"line_start":120,"line_end":120,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f64_slice(&float_values);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125385,"byte_end":125434,"line_start":121,"line_end":121,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125439,"byte_end":125442,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125447,"byte_end":125548,"line_start":123,"line_end":123,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125553,"byte_end":125560,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126671,"byte_end":126691,"line_start":154,"line_end":154,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f32_slice","value":"pub fn convert_to_f32_slice(&Self, &mut [f32])","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)\n elements of `self` into `f32` values in `dst`.","sig":null,"attributes":[{"value":"/ Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125621,"byte_end":125704,"line_start":127,"line_end":127,"column_start":5,"column_end":88}},{"value":"/ elements of `self` into `f32` values in `dst`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125709,"byte_end":125759,"line_start":128,"line_end":128,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125764,"byte_end":125767,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125772,"byte_end":125823,"line_start":130,"line_end":130,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125828,"byte_end":125831,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125836,"byte_end":125929,"line_start":132,"line_end":132,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":125934,"byte_end":126019,"line_start":133,"line_end":133,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126024,"byte_end":126114,"line_start":134,"line_end":134,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126119,"byte_end":126142,"line_start":135,"line_end":135,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126147,"byte_end":126150,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126155,"byte_end":126167,"line_start":137,"line_end":137,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126172,"byte_end":126175,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126180,"byte_end":126250,"line_start":139,"line_end":139,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126255,"byte_end":126258,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126263,"byte_end":126277,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126282,"byte_end":126293,"line_start":142,"line_end":142,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126298,"byte_end":126325,"line_start":143,"line_end":143,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126330,"byte_end":126363,"line_start":144,"line_end":144,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f32; 4];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126368,"byte_end":126399,"line_start":145,"line_end":145,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126404,"byte_end":126407,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126412,"byte_end":126511,"line_start":147,"line_end":147,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126516,"byte_end":126519,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126524,"byte_end":126542,"line_start":149,"line_end":149,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f32_slice(&mut buffer);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126547,"byte_end":126597,"line_start":150,"line_end":150,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126602,"byte_end":126605,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126610,"byte_end":126651,"line_start":152,"line_end":152,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126656,"byte_end":126663,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127772,"byte_end":127792,"line_start":183,"line_end":183,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f64_slice","value":"pub fn convert_to_f64_slice(&Self, &mut [f64])","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)\n elements of `self` into `f64` values in `dst`.","sig":null,"attributes":[{"value":"/ Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126722,"byte_end":126805,"line_start":156,"line_end":156,"column_start":5,"column_end":88}},{"value":"/ elements of `self` into `f64` values in `dst`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126810,"byte_end":126860,"line_start":157,"line_end":157,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126865,"byte_end":126868,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126873,"byte_end":126924,"line_start":159,"line_end":159,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126929,"byte_end":126932,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":126937,"byte_end":127030,"line_start":161,"line_end":161,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127035,"byte_end":127120,"line_start":162,"line_end":162,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127125,"byte_end":127215,"line_start":163,"line_end":163,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127220,"byte_end":127243,"line_start":164,"line_end":164,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127248,"byte_end":127251,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127256,"byte_end":127268,"line_start":166,"line_end":166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127273,"byte_end":127276,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127281,"byte_end":127351,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127356,"byte_end":127359,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127364,"byte_end":127378,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127383,"byte_end":127394,"line_start":171,"line_end":171,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127399,"byte_end":127426,"line_start":172,"line_end":172,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127431,"byte_end":127464,"line_start":173,"line_end":173,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f64; 4];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127469,"byte_end":127500,"line_start":174,"line_end":174,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127505,"byte_end":127508,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127513,"byte_end":127612,"line_start":176,"line_end":176,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127617,"byte_end":127620,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127625,"byte_end":127643,"line_start":178,"line_end":178,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f64_slice(&mut buffer);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127648,"byte_end":127698,"line_start":179,"line_end":179,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127703,"byte_end":127706,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127711,"byte_end":127752,"line_start":181,"line_end":181,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":127757,"byte_end":127764,"line_start":182,"line_end":182,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":374},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":129931,"byte_end":129947,"line_start":233,"line_end":233,"column_start":11,"column_end":27},"name":"HalfBitsSliceExt","qualname":"::slice::HalfBitsSliceExt","value":"HalfBitsSliceExt: private::SealedHalfBitsSlice","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":377}],"decl_id":null,"docs":" Extensions to `[u16]` slices to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[u16]` slices to support reinterpret operations.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":129775,"byte_end":129842,"line_start":230,"line_end":230,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":129843,"byte_end":129846,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":129847,"byte_end":129920,"line_start":232,"line_end":232,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130988,"byte_end":131004,"line_start":256,"line_end":256,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast","value":"pub fn reinterpret_cast<H>(&Self) -> &[H] where H: crate::private::SealedHalf","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) or","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":129984,"byte_end":130066,"line_start":234,"line_end":234,"column_start":5,"column_end":87}},{"value":"/ [`bf16`](../struct.bf16.html) numbers.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130071,"byte_end":130113,"line_start":235,"line_end":235,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130118,"byte_end":130121,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`](../struct.f16.html) or","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130126,"byte_end":130211,"line_start":237,"line_end":237,"column_start":5,"column_end":90}},{"value":"/ [`bf16`](../struct.bf16.html) type.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130216,"byte_end":130255,"line_start":238,"line_end":238,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130260,"byte_end":130263,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130268,"byte_end":130359,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130364,"byte_end":130387,"line_start":241,"line_end":241,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130392,"byte_end":130395,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130400,"byte_end":130414,"line_start":243,"line_end":243,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130419,"byte_end":130422,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130427,"byte_end":130438,"line_start":245,"line_end":245,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130443,"byte_end":130470,"line_start":246,"line_end":246,"column_start":5,"column_end":32}},{"value":"/ let int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130475,"byte_end":130584,"line_start":247,"line_end":247,"column_start":5,"column_end":114}},{"value":"/ let float_buffer: &[f16] = int_buffer.reinterpret_cast();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130589,"byte_end":130650,"line_start":248,"line_end":248,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130655,"byte_end":130658,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130663,"byte_end":130751,"line_start":250,"line_end":250,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130756,"byte_end":130759,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130764,"byte_end":130855,"line_start":252,"line_end":252,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130860,"byte_end":130903,"line_start":253,"line_end":253,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast::<f16>();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130908,"byte_end":130968,"line_start":254,"line_end":254,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":130973,"byte_end":130980,"line_start":255,"line_end":255,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132576,"byte_end":132596,"line_start":291,"line_end":291,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast_mut","value":"pub fn reinterpret_cast_mut<H>(&mut Self) -> &mut [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)\n or [`bf16`](../struct.bf16.html)  numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131077,"byte_end":131172,"line_start":260,"line_end":260,"column_start":5,"column_end":100}},{"value":"/ or [`bf16`](../struct.bf16.html)  numbers.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131177,"byte_end":131223,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131228,"byte_end":131231,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`](../struct.f16.html) or","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131236,"byte_end":131321,"line_start":263,"line_end":263,"column_start":5,"column_end":90}},{"value":"/ [`bf16`](../struct.bf16.html) type.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131326,"byte_end":131365,"line_start":264,"line_end":264,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131370,"byte_end":131373,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131378,"byte_end":131472,"line_start":266,"line_end":266,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [f16]` is borrowed.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131477,"byte_end":131561,"line_start":267,"line_end":267,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131566,"byte_end":131569,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131574,"byte_end":131588,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131593,"byte_end":131596,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131601,"byte_end":131612,"line_start":271,"line_end":271,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131617,"byte_end":131644,"line_start":272,"line_end":272,"column_start":5,"column_end":32}},{"value":"/ let mut int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131649,"byte_end":131762,"line_start":273,"line_end":273,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131767,"byte_end":131770,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131775,"byte_end":131780,"line_start":275,"line_end":275,"column_start":5,"column_end":10}},{"value":"/     let float_buffer: &mut [f16] = int_buffer.reinterpret_cast_mut();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131785,"byte_end":131858,"line_start":276,"line_end":276,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131863,"byte_end":131866,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131871,"byte_end":131963,"line_start":278,"line_end":278,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131968,"byte_end":131971,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/     // Mutating the f16 slice will mutating the original","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":131976,"byte_end":132036,"line_start":280,"line_end":280,"column_start":5,"column_end":65}},{"value":"/     float_buffer[0] = f16::from_f32(0.);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132041,"byte_end":132085,"line_start":281,"line_end":281,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132090,"byte_end":132095,"line_start":282,"line_end":282,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132100,"byte_end":132103,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop float_buffer before using int_buffer again or we will get a borrow error.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132108,"byte_end":132214,"line_start":284,"line_end":284,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(int_buffer, [f16::from_f32(0.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132219,"byte_end":132335,"line_start":285,"line_end":285,"column_start":5,"column_end":121}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132340,"byte_end":132343,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132348,"byte_end":132439,"line_start":287,"line_end":287,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132444,"byte_end":132487,"line_start":288,"line_end":288,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132492,"byte_end":132556,"line_start":289,"line_end":289,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132561,"byte_end":132568,"line_start":290,"line_end":290,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":387},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132732,"byte_end":132752,"line_start":299,"line_end":299,"column_start":15,"column_end":35},"name":"SealedHalfFloatSlice","qualname":"::slice::private::SealedHalfFloatSlice","value":"SealedHalfFloatSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":390},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":132858,"byte_end":132877,"line_start":303,"line_end":303,"column_start":15,"column_end":34},"name":"SealedHalfBitsSlice","qualname":"::slice::private::SealedHalfBitsSlice","value":"SealedHalfBitsSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143550,"byte_end":143563,"line_start":592,"line_end":592,"column_start":8,"column_end":21},"name":"from_bits_mut","qualname":"::slice::from_bits_mut","value":"pub fn from_bits_mut(&mut [u16]) -> &mut [f16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)\n numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143079,"byte_end":143174,"line_start":582,"line_end":582,"column_start":1,"column_end":96}},{"value":"/ numbers.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143175,"byte_end":143187,"line_start":583,"line_end":583,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143188,"byte_end":143191,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ The transmuted slice has the same life time as the original, which prevents mutating the borrowed","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143192,"byte_end":143293,"line_start":585,"line_end":585,"column_start":1,"column_end":102}},{"value":"/ `mut [u16]` argument as long as the returned `mut [f16]` is borrowed.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143294,"byte_end":143367,"line_start":586,"line_end":586,"column_start":1,"column_end":74}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfBitsSliceExt::reinterpret_cast_mut`](trait.HalfBitsSliceExt.html#tymethod.reinterpret_cast_mut) instead\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143368,"byte_end":143532,"line_start":587,"line_end":590,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143533,"byte_end":143542,"line_start":591,"line_end":591,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":416},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144105,"byte_end":144116,"line_start":606,"line_end":606,"column_start":8,"column_end":19},"name":"to_bits_mut","qualname":"::slice::to_bits_mut","value":"pub fn to_bits_mut(&mut [f16]) -> &mut [u16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of [`f16`](../struct.f16.html) numbers as a mutable slice of `u16`\n bits.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of [`f16`](../struct.f16.html) numbers as a mutable slice of `u16`","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143633,"byte_end":143731,"line_start":596,"line_end":596,"column_start":1,"column_end":99}},{"value":"/ bits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143732,"byte_end":143741,"line_start":597,"line_end":597,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143742,"byte_end":143745,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/The transmuted slice has the same life time as the original, which prevents mutating the","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143746,"byte_end":143837,"line_start":599,"line_end":599,"column_start":1,"column_end":92}},{"value":"/ borrowed `mut [f16]` argument as long as the returned `mut [u16]` is borrowed.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143838,"byte_end":143920,"line_start":600,"line_end":600,"column_start":1,"column_end":83}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfFloatSliceExt::reinterpret_cast_mut`](trait.HalfFloatSliceExt.html#tymethod.reinterpret_cast_mut) instead\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":143921,"byte_end":144087,"line_start":601,"line_end":604,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144088,"byte_end":144097,"line_start":605,"line_end":605,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":417},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144518,"byte_end":144527,"line_start":618,"line_end":618,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::slice::from_bits","value":"pub fn from_bits(&[u16]) -> &[f16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) numbers.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144186,"byte_end":144274,"line_start":610,"line_end":610,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144275,"byte_end":144278,"line_start":611,"line_end":611,"column_start":1,"column_end":4}},{"value":"/ The transmuted slice has the same life time as the original.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144279,"byte_end":144343,"line_start":612,"line_end":612,"column_start":1,"column_end":65}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfBitsSliceExt::reinterpret_cast`](trait.HalfBitsSliceExt.html#tymethod.reinterpret_cast) instead\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144344,"byte_end":144500,"line_start":613,"line_end":616,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144501,"byte_end":144510,"line_start":617,"line_end":617,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":418},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144919,"byte_end":144926,"line_start":630,"line_end":630,"column_start":8,"column_end":15},"name":"to_bits","qualname":"::slice::to_bits","value":"pub fn to_bits(&[f16]) -> &[u16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a slice of [`f16`](../struct.f16.html) numbers as a slice of `u16` bits.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of [`f16`](../struct.f16.html) numbers as a slice of `u16` bits.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144585,"byte_end":144673,"line_start":622,"line_end":622,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144674,"byte_end":144677,"line_start":623,"line_end":623,"column_start":1,"column_end":4}},{"value":"/ The transmuted slice has the same life time as the original.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144678,"byte_end":144742,"line_start":624,"line_end":624,"column_start":1,"column_end":65}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfFloatSliceExt::reinterpret_cast`](trait.HalfFloatSliceExt.html#tymethod.reinterpret_cast) instead\")","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144743,"byte_end":144901,"line_start":625,"line_end":628,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":144902,"byte_end":144911,"line_start":629,"line_end":629,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":428},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4291,"byte_end":4298,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":440}],"decl_id":null,"docs":" A collection of the most used items and traits in this crate for easy importing.","sig":null,"attributes":[{"value":"/ A collection of the most used items and traits in this crate for easy importing.","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4129,"byte_end":4213,"line_start":92,"line_end":92,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4214,"byte_end":4217,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4218,"byte_end":4232,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4233,"byte_end":4236,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4237,"byte_end":4248,"line_start":96,"line_end":96,"column_start":1,"column_end":12}},{"value":"/ use half::prelude::*;","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4249,"byte_end":4274,"line_start":97,"line_end":97,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4275,"byte_end":4282,"line_start":98,"line_end":98,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":451},"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4644,"byte_end":4654,"line_start":114,"line_end":114,"column_start":15,"column_end":25},"name":"SealedHalf","qualname":"::private::SealedHalf","value":"SealedHalf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6105,"byte_end":6109,"line_start":39,"line_end":39,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20470,"byte_end":20474,"line_start":478,"line_end":478,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20624,"byte_end":20628,"line_start":486,"line_end":486,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20778,"byte_end":20782,"line_start":494,"line_end":494,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":21018,"byte_end":21022,"line_start":504,"line_end":504,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24001,"byte_end":24005,"line_start":593,"line_end":593,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24173,"byte_end":24177,"line_start":600,"line_end":600,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24311,"byte_end":24315,"line_start":606,"line_end":606,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24448,"byte_end":24452,"line_start":612,"line_end":612,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24587,"byte_end":24591,"line_start":618,"line_end":618,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24724,"byte_end":24728,"line_start":624,"line_end":624,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24853,"byte_end":24857,"line_start":630,"line_end":630,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24985,"byte_end":24989,"line_start":636,"line_end":636,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":25117,"byte_end":25121,"line_start":642,"line_end":642,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63451,"byte_end":63454,"line_start":335,"line_end":335,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78156,"byte_end":78159,"line_start":787,"line_end":787,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78306,"byte_end":78309,"line_start":795,"line_end":795,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78457,"byte_end":78460,"line_start":803,"line_end":803,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78695,"byte_end":78698,"line_start":813,"line_end":813,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":81672,"byte_end":81675,"line_start":902,"line_end":902,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":81841,"byte_end":81844,"line_start":909,"line_end":909,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":81978,"byte_end":81981,"line_start":915,"line_end":915,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82114,"byte_end":82117,"line_start":921,"line_end":921,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82252,"byte_end":82255,"line_start":927,"line_end":927,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82388,"byte_end":82391,"line_start":933,"line_end":933,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82516,"byte_end":82519,"line_start":939,"line_end":939,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82647,"byte_end":82650,"line_start":945,"line_end":945,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82778,"byte_end":82781,"line_start":951,"line_end":951,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4683,"byte_end":4686,"line_start":116,"line_end":116,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4714,"byte_end":4718,"line_start":117,"line_end":117,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":3965,"byte_end":3970,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":353}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":6105,"byte_end":6109,"line_start":39,"line_end":39,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20470,"byte_end":20474,"line_start":478,"line_end":478,"column_start":19,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":2727}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20624,"byte_end":20628,"line_start":486,"line_end":486,"column_start":19,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":2727}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":20778,"byte_end":20782,"line_start":494,"line_end":494,"column_start":20,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":2476}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":21018,"byte_end":21022,"line_start":504,"line_end":504,"column_start":21,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24001,"byte_end":24005,"line_start":593,"line_end":593,"column_start":18,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":11131}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24173,"byte_end":24177,"line_start":600,"line_end":600,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8721}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24311,"byte_end":24315,"line_start":606,"line_end":606,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8728}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24448,"byte_end":24452,"line_start":612,"line_end":612,"column_start":19,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8740}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24587,"byte_end":24591,"line_start":618,"line_end":618,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8742}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24724,"byte_end":24728,"line_start":624,"line_end":624,"column_start":17,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8732}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24853,"byte_end":24857,"line_start":630,"line_end":630,"column_start":16,"column_end":20},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8730}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":24985,"byte_end":24989,"line_start":636,"line_end":636,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8734}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/bfloat.rs","byte_start":25117,"byte_end":25121,"line_start":642,"line_end":642,"column_start":19,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":8736}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":63451,"byte_end":63454,"line_start":335,"line_end":335,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78156,"byte_end":78159,"line_start":787,"line_end":787,"column_start":19,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":2727}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78306,"byte_end":78309,"line_start":795,"line_end":795,"column_start":19,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":2727}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78457,"byte_end":78460,"line_start":803,"line_end":803,"column_start":20,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":2476}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":78695,"byte_end":78698,"line_start":813,"line_end":813,"column_start":21,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":81672,"byte_end":81675,"line_start":902,"line_end":902,"column_start":18,"column_end":21},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":11131}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":81841,"byte_end":81844,"line_start":909,"line_end":909,"column_start":16,"column_end":19},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8721}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":81978,"byte_end":81981,"line_start":915,"line_end":915,"column_start":18,"column_end":21},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8728}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82114,"byte_end":82117,"line_start":921,"line_end":921,"column_start":19,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8740}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82252,"byte_end":82255,"line_start":927,"line_end":927,"column_start":19,"column_end":22},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8742}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82388,"byte_end":82391,"line_start":933,"line_end":933,"column_start":17,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8732}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82516,"byte_end":82519,"line_start":939,"line_end":939,"column_start":16,"column_end":19},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8730}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82647,"byte_end":82650,"line_start":945,"line_end":945,"column_start":19,"column_end":22},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8734}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/binary16.rs","byte_start":82778,"byte_end":82781,"line_start":951,"line_end":951,"column_start":19,"column_end":22},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":474},"to":{"krate":1,"index":8736}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":121462,"byte_end":121482,"line_start":23,"line_end":23,"column_start":39,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":387},"to":{"krate":0,"index":367}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/slice.rs","byte_start":129958,"byte_end":129977,"line_start":233,"line_end":233,"column_start":38,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":390},"to":{"krate":0,"index":374}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4683,"byte_end":4686,"line_start":116,"line_end":116,"column_start":25,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":474},"to":{"krate":0,"index":451}},{"span":{"file_name":"/Users/halvorbo/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.7.1/src/lib.rs","byte_start":4714,"byte_end":4718,"line_start":117,"line_end":117,"column_start":25,"column_end":29},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":454},"to":{"krate":0,"index":451}}]}